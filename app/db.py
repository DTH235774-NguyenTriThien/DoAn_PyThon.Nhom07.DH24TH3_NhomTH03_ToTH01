# app/db.py
import pyodbc
import configparser
from tkinter import messagebox
import re # S·ª¨A 1: Import th∆∞ vi·ªán Regular Expression ƒë·ªÉ ki·ªÉm tra

# ==============================
# üîß ƒê·ªçc c·∫•u h√¨nh t·ª´ config.ini
# ==============================
config = configparser.ConfigParser()
config.read("config.ini", encoding="utf-8")

server = config["database"]["server"]
database = config["database"]["database"]
driver = config["database"]["driver"]
trusted = config["database"].get("trusted_connection", "no")
timeout = config["database"].get("timeout", "30")

username = config["database"].get("username", "")
password = config["database"].get("password", "")

# ==============================
# üîó K·∫øt n·ªëi SQL Server
# ==============================
conn = None
cursor = None

try:
    if trusted.lower() == "yes":
        conn_str = (
            f"DRIVER={driver};"
            f"SERVER={server};"
            f"DATABASE={database};"
            f"Trusted_Connection=yes;"
            f"timeout={timeout}"
        )
    else:
        conn_str = (
            f"DRIVER={driver};"
            f"SERVER={server};"
            f"DATABASE={database};"
            f"UID={username};"
            f"PWD={password};"
            f"timeout={timeout}"
        )

    conn = pyodbc.connect(conn_str)
    cursor = conn.cursor()

except Exception as e:
    messagebox.showerror("L·ªói k·∫øt n·ªëi SQL Server", f"Kh√¥ng th·ªÉ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu:\n{e}")
    conn, cursor = None, None


# ==============================
# üìò C√°c h√†m ti·ªán √≠ch thao t√°c DB
# ==============================

# S·ª¨A 2: H√†m n√†y ƒë√£ ƒë∆∞·ª£c l√†m an to√†n h∆°n
def fetch_all(table_name):
    """Truy v·∫•n to√†n b·ªô d·ªØ li·ªáu t·ª´ 1 b·∫£ng (tr·∫£ list[dict])."""
    if cursor is None:
        messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a k·∫øt n·ªëi SQL Server.")
        return []

    # B·∫Øt bu·ªôc: Ki·ªÉm tra t√™n b·∫£ng ƒë·ªÉ ch·ªëng SQL Injection
    if not re.match(r"^[a-zA-Z0-9_]+$", table_name):
        messagebox.showerror("L·ªói b·∫£o m·∫≠t", f"T√™n b·∫£ng kh√¥ng h·ª£p l·ªá: {table_name}")
        return []

    try:
        # Gi·ªù ƒë√£ an to√†n ƒë·ªÉ d√πng f-string
        cursor.execute(f"SELECT * FROM {table_name}") 
        columns = [col[0] for col in cursor.description]
        return [dict(zip(columns, row)) for row in cursor.fetchall()]
    except Exception as e:
        messagebox.showerror("L·ªói truy v·∫•n", f"Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ {table_name}:\n{e}")
        return []


# S·ª¨A 3: Thay ƒë·ªïi ch·ªØ k√Ω h√†m n√†y ƒë·ªÉ ch·∫•p nh·∫≠n `params`
def fetch_one(table_name, where_clause=None, params=()):
    """Truy v·∫•n 1 d√≤ng d·ªØ li·ªáu (tr·∫£ dict ho·∫∑c None). AN TO√ÄN."""
    if cursor is None:
        messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a k·∫øt n·ªëi SQL Server.")
        return None

    # Ki·ªÉm tra t√™n b·∫£ng
    if not re.match(r"^[a-zA-Z0-9_]+$", table_name):
        messagebox.showerror("L·ªói b·∫£o m·∫≠t", f"T√™n b·∫£ng kh√¥ng h·ª£p l·ªá: {table_name}")
        return None

    try:
        query = f"SELECT * FROM {table_name}"
        if where_clause:
            # `where_clause` b√¢y gi·ªù ph·∫£i l√† "MaNV = ? AND Role = ?"
            query += f" WHERE {where_clause}" 
        
        # Truy v·∫•n ƒë√£ ƒë∆∞·ª£c tham s·ªë h√≥a
        cursor.execute(query, params) 
        row = cursor.fetchone()
        
        if row:
            columns = [col[0] for col in cursor.description]
            return dict(zip(columns, row))
        return None
    except Exception as e:
        messagebox.showerror("L·ªói truy v·∫•n", f"Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ {table_name}:\n{e}")
        return None


def fetch_query(query, params=()):
    """Th·ª±c thi truy v·∫•n SELECT b·∫•t k·ª≥ (tr·∫£ list[dict]). (H√†m n√†y ƒë√£ an to√†n)"""
    if cursor is None:
        messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a k·∫øt n·ªëi SQL Server.")
        return []

    try:
        cursor.execute(query, params)
        columns = [col[0] for col in cursor.description]
        return [dict(zip(columns, row)) for row in cursor.fetchall()]
    except Exception as e:
        messagebox.showerror("L·ªói SQL", f"Kh√¥ng th·ªÉ th·ª±c thi truy v·∫•n:\n{e}\n\nQuery:\n{query}")
        return []


def execute_query(query, params=()):
    """Th·ª±c thi truy v·∫•n ghi (INSERT, UPDATE, DELETE). (H√†m n√†y ƒë√£ an to√†n)"""
    if cursor is None:
        messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a k·∫øt n·ªëi SQL Server.")
        return False

    try:
        cursor.execute(query, params)
        conn.commit()
        return True
    except Exception as e:
        conn.rollback()
        messagebox.showerror("L·ªói SQL", f"Kh√¥ng th·ªÉ th·ª±c thi truy v·∫•n:\n{e}\n\nQuery:\n{query}")
        return False


def execute_scalar(query, params=()):
    """Th·ª±c thi truy v·∫•n tr·∫£ v·ªÅ 1 gi√° tr·ªã ƒë∆°n. (H√†m n√†y ƒë√£ an to√†n)"""
    if cursor is None:
        messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a k·∫øt n·ªëi SQL Server.")
        return None

    try:
        cursor.execute(query, params)
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        messagebox.showerror("L·ªói SQL", f"Kh√¥ng th·ªÉ th·ª±c thi truy v·∫•n scalar:\n{e}\n\nQuery:\n{query}")
        return None


# S·ª¨A 4: `where_clause` ƒë√£ ƒë∆∞·ª£c d√πng ƒë√∫ng c√°ch
def count_query(table_name, where_clause=None, params=()):
    """ƒê·∫øm s·ªë d√≤ng c·ªßa 1 b·∫£ng (c√≥ th·ªÉ c√≥ ƒëi·ªÅu ki·ªán WHERE). AN TO√ÄN."""
    
    # Ki·ªÉm tra t√™n b·∫£ng
    if not re.match(r"^[a-zA-Z0-9_]+$", table_name):
        messagebox.showerror("L·ªói b·∫£o m·∫≠t", f"T√™n b·∫£ng kh√¥ng h·ª£p l·ªá: {table_name}")
        return None
        
    sql = f"SELECT COUNT(*) FROM {table_name}"
    if where_clause:
        sql += f" WHERE {where_clause}" # V√≠ d·ª•: "MaNV = ?"
        
    # G·ªçi h√†m `execute_scalar` (ƒë√£ an to√†n)
    return execute_scalar(sql, params)


# S·ª¨A 5: X√≥a h√†m `close_connection` b·ªã tr√πng l·∫∑p
# def close_connection():
# ... (ƒë√£ x√≥a) ...


def close_db_connection():
    """ƒê√≥ng k·∫øt n·ªëi ƒë·∫øn SQL Server (ƒë∆∞·ª£c g·ªçi b·ªüi main.py)."""
    global conn, cursor
    try:
        if cursor:
            cursor.close()
        if conn:
            conn.close()
        cursor = None
        conn = None
        print("ƒê√£ ƒë√≥ng k·∫øt n·ªëi CSDL.") # C√≥ th·ªÉ b·ªè ghi ch√∫ ƒë·ªÉ debug
    except Exception as e:
        print(f"L·ªói khi ƒë√≥ng CSDL: {e}")
        cursor = None
        conn = None