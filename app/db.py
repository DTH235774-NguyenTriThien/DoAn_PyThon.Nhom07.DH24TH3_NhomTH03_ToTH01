import pyodbc
import configparser
from tabulate import tabulate  # Hi·ªÉn th·ªã b·∫£ng d·ªÖ ƒë·ªçc

# ============================================================
# ƒê·ªçc file c·∫•u h√¨nh config.ini
# ============================================================
config = configparser.ConfigParser()
config.read('config.ini', encoding='utf-8')

server = config['database']['server']
database = config['database']['database']
driver = config['database']['driver']
trusted = config['database'].get('trusted_connection', 'no')
timeout = config['database'].get('timeout', '30')

# ============================================================
# K·∫øt n·ªëi ƒë·∫øn SQL Server
# ============================================================
try:
    if trusted.lower() == 'yes':
        # Windows Authentication
        conn_str = (
            f"DRIVER={driver};"
            f"SERVER={server};"
            f"DATABASE={database};"
            f"Trusted_Connection=yes;"
            f"timeout={timeout}"
        )
    else:
        # SQL Server Authentication
        username = config['database']['username']
        password = config['database']['password']
        conn_str = (
            f"DRIVER={driver};"
            f"SERVER={server};"
            f"DATABASE={database};"
            f"UID={username};"
            f"PWD={password};"
            f"timeout={timeout}"
        )

    conn = pyodbc.connect(conn_str)
    cursor = conn.cursor()
    print("‚úÖ K·∫øt n·ªëi SQL Server th√†nh c√¥ng!")

except Exception as e:
    print("‚ùå L·ªói k·∫øt n·ªëi SQL Server:", e)
    conn = None
    cursor = None


# ============================================================
# H√†m: L·∫•y to√†n b·ªô d·ªØ li·ªáu t·ª´ m·ªôt b·∫£ng
# ============================================================
def fetch_all(table_name):
    """
    Truy v·∫•n v√† hi·ªÉn th·ªã to√†n b·ªô d·ªØ li·ªáu t·ª´ 1 b·∫£ng trong database.
    D·ªØ li·ªáu ƒë∆∞·ª£c hi·ªÉn th·ªã c√≥ ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc, h·ªó tr·ª£ ti·∫øng Vi·ªát.
    """
    if cursor is None:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ truy v·∫•n ‚Äî ch∆∞a k·∫øt n·ªëi SQL Server.")
        return

    try:
        cursor.execute(f"SELECT * FROM {table_name}")
        rows = cursor.fetchall()

        if not rows:
            print(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong b·∫£ng '{table_name}'.")
            return

        headers = [desc[0] for desc in cursor.description]

        formatted_data = []
        for row in rows:
            cleaned_row = []
            for item in row:
                if item is None:
                    cleaned_row.append("")
                elif hasattr(item, 'strftime'):  # ƒë·ªãnh d·∫°ng ng√†y th√°ng
                    cleaned_row.append(item.strftime('%d/%m/%Y'))
                elif hasattr(item, 'quantize'):  # ƒë·ªãnh d·∫°ng Decimal
                    cleaned_row.append(f"{int(item):,}")
                else:
                    cleaned_row.append(str(item).strip())
            formatted_data.append(cleaned_row)

        print(f"\nüìã D·ªØ li·ªáu trong b·∫£ng: {table_name}")
        print(tabulate(formatted_data, headers=headers, tablefmt="fancy_grid", stralign="center"))

    except Exception as e:
        print(f"‚ùå L·ªói khi truy v·∫•n b·∫£ng '{table_name}':", e)


# ============================================================
# H√†m: L·∫•y 1 d√≤ng d·ªØ li·ªáu
# ============================================================
def fetch_one(table_name, condition=None):
    """
    Truy v·∫•n 1 d√≤ng d·ªØ li·ªáu t·ª´ b·∫£ng (t√πy ƒëi·ªÅu ki·ªán WHERE).
    V√≠ d·ª•: fetch_one("NhanVien", "MaNV = 'NV001'")
    """
    if cursor is None:
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ truy v·∫•n ‚Äî ch∆∞a k·∫øt n·ªëi SQL Server.")
        return None

    try:
        query = f"SELECT * FROM {table_name}"
        if condition:
            query += f" WHERE {condition}"

        cursor.execute(query)
        row = cursor.fetchone()

        if not row:
            print(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p trong b·∫£ng '{table_name}'.")
            return None

        return row

    except Exception as e:
        print(f"‚ùå L·ªói khi truy v·∫•n d√≤ng d·ªØ li·ªáu trong b·∫£ng '{table_name}':", e)
        return None


# ============================================================
# H√†m: ƒê√≥ng k·∫øt n·ªëi
# ============================================================
def close_connection():
    """ƒê√≥ng k·∫øt n·ªëi ƒë·∫øn SQL Server."""
    try:
        if cursor:
            cursor.close()
        if conn:
            conn.close()
        print("üîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi SQL Server.")
    except Exception as e:
        print("‚ö†Ô∏è L·ªói khi ƒë√≥ng k·∫øt n·ªëi:", e)


# ============================================================
# Test nhanh khi ch·∫°y file tr·ª±c ti·∫øp
# ============================================================
if __name__ == "__main__":
    fetch_all("NhanVien")

    print("\nüîç L·∫•y th·ª≠ 1 d√≤ng d·ªØ li·ªáu:")
    row = fetch_one("NhanVien", "MaNV = 'NV001'")
    if row:
        print(row)

    close_connection()
