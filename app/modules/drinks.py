# app/modules/drinks.py
import tkinter as tk
from tkinter import ttk, messagebox
from decimal import Decimal, InvalidOperation
from app import db
from app.db import execute_query
from app.theme import setup_styles
# S·ª¨A 1: X√≥a clear_window, center_window (ch·ªâ gi·ªØ l·∫°i create_form_window)
from app.utils.utils import create_form_window
# H√†m nghi·ªáp v·ª•
from app.utils.business_helpers import safe_delete
# H√†m sinh m√£
from app.utils.id_helpers import generate_next_masp

# S·ª¨A 2: ƒê·ªïi t√™n h√†m v√† tham s·ªë
# Nh·∫≠n parent_frame (l√† module_container t·ª´ mainmenu)
def create_drinks_module(parent_frame, on_back_callback):
    
    # S·ª¨A 3: X√≥a c√°c l·ªánh ƒëi·ªÅu khi·ªÉn c·ª≠a s·ªï (root)
    setup_styles()

    # S·ª¨A 4: T·∫°o frame ch√≠nh c·ªßa module, pack v√†o parent_frame
    module_frame = tk.Frame(parent_frame, bg="#f5e6ca")
    # KH√îNG PACK() ·ªü ƒë√¢y, ƒë·ªÉ mainmenu ki·ªÉm so√°t
    
    # Header (pack v√†o module_frame)
    header = tk.Frame(module_frame, bg="#4b2e05", height=70)
    header.pack(fill="x")
    tk.Label(header, text="‚òï QU·∫¢N L√ù S·∫¢N PH·∫®M / ƒê·ªí U·ªêNG",
             bg="#4b2e05", fg="white", font=("Segoe UI", 16, "bold")).pack(pady=12)

    # Top controls (pack v√†o module_frame)
    top = tk.Frame(module_frame, bg="#f5e6ca")
    top.pack(fill="x", pady=8, padx=12)

    search_var = tk.StringVar()
    tk.Label(top, text="üîé T√¨m:", bg="#f5e6ca", font=("Arial", 11)).pack(side="left", padx=(0,6))
    entry_search = ttk.Entry(top, textvariable=search_var, width=30)
    entry_search.pack(side="left", padx=(0,6))

    # Treeview (pack v√†o module_frame)
    columns = ("MaSP", "TenSP", "LoaiSP", "DonGia", "TrangThai")
    tree = ttk.Treeview(module_frame, columns=columns, show="headings", height=16)
    headers_vn = {
        "MaSP": "M√£ SP",
        "TenSP": "T√™n s·∫£n ph·∫©m",
        "LoaiSP": "Lo·∫°i",
        "DonGia": "ƒê∆°n gi√° (ƒë)",
        "TrangThai": "Tr·∫°ng th√°i"
    }
    for col in columns:
        tree.heading(col, text=headers_vn[col])
        tree.column(col, anchor="center", width=140 if col!="TenSP" else 260)
    tree.pack(fill="both", expand=True, padx=12, pady=(4,12))

    # Load data function
    def load_data(keyword=None):
        try:
            for i in tree.get_children():
                tree.delete(i)
            sql = "SELECT MaSP, TenSP, LoaiSP, DonGia, TrangThai FROM SANPHAM"
            params = ()
            if keyword:
                sql += " WHERE MaSP LIKE ? OR TenSP LIKE ? OR LoaiSP LIKE ? OR TrangThai LIKE ?"
                kw = f"%{keyword}%"
                params = (kw, kw, kw, kw)
                db.cursor.execute(sql, params)
            else:
                db.cursor.execute(sql)
            rows = db.cursor.fetchall()
            for row in rows:
                ma = row.MaSP.strip()
                ten = row.TenSP
                loai = row.LoaiSP or ""
                try:
                    gia = f"{int(row.DonGia):,}"
                except Exception:
                    gia = str(row.DonGia)
                tt = row.TrangThai or ""
                tree.insert("", "end", values=(ma, ten, loai, gia, tt))
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: {e}")

    # Button on top frame 
    ttk.Button(top, text="üîÑ T·∫£i l·∫°i", style="Close.TButton",
             command=load_data).pack(side="left", padx=5)
    ttk.Button(top, text="‚ûï Th√™m", style="Add.TButton",
             command=lambda: add_drink(load_data)).pack(side="left", padx=5)
    
    # (role ƒë√£ ƒë∆∞·ª£c x√≥a ·ªü Gƒê 2)
    ttk.Button(top, text="‚úèÔ∏è S·ª≠a", style="Edit.TButton",
             command=lambda: edit_drink(tree, load_data)).pack(side="left", padx=5)
    
    ttk.Button(top, text="üóë X√≥a", style="Delete.TButton",
             command=lambda: delete_drink(tree, load_data)).pack(side="left", padx=5)
    
    # (callback ƒë√£ ƒë∆∞·ª£c s·ª≠a ·ªü Gƒê 2)
    ttk.Button(top, text="‚¨Ö Quay l·∫°i", style="Close.TButton",
             command=on_back_callback).pack(side="right", padx=5)

    load_data()

    # Real-time search debounce
    search_after_id = {"id": None}
    def on_search_change(event=None):
        if search_after_id["id"]:
            # C·∫ßn d√πng module_frame ƒë·ªÉ g·ªçi .after()
            module_frame.after_cancel(search_after_id["id"])
        search_after_id["id"] = module_frame.after(250, lambda: load_data(search_var.get().strip()))

    entry_search.bind("<KeyRelease>", on_search_change)

    # Double-click to edit
    def on_double_click(event):
        sel = tree.selection()
        if sel:
            # (role ƒë√£ ƒë∆∞·ª£c x√≥a ·ªü Gƒê 2)
            edit_drink(tree, load_data)
    tree.bind("<Double-1>", on_double_click)

    def refresh():
        load_data()
        
    # S·ª¨A 5: RETURN frame ch√≠nh c·ªßa module
    return module_frame


# (C√°c h√†m add_drink, edit_drink, delete_drink gi·ªØ nguy√™n)
# ... (to√†n b·ªô code c·ªßa 3 h√†m ƒë√≥) ...

def add_drink(refresh):
    """Th√™m s·∫£n ph·∫©m / ƒë·ªì u·ªëng (chu·∫©n h√≥a giao di·ªán theo form Employee)"""
    # --- T·∫°o c·ª≠a s·ªï form chu·∫©n ---
    win, form = create_form_window("‚ûï Th√™m s·∫£n ph·∫©m", size="460x400")
    entries = {}

    # --- Danh s√°ch tr∆∞·ªùng v√† gi√° tr·ªã cho combobox ---
    labels = ["M√£ SP", "T√™n s·∫£n ph·∫©m", "Lo·∫°i", "ƒê∆°n gi√°", "Tr·∫°ng th√°i"]
    types = ["C√† ph√™", "Tr√† s·ªØa", "Sinh t·ªë", "N∆∞·ªõc ng·ªçt", "Kh√°c"]
    statuses = ["C√≤n b√°n", "H·∫øt h√†ng", "Ng∆∞ng b√°n"]

    # --- Sinh form ---
    for i, text in enumerate(labels):
        ttk.Label(form, text=text, font=("Arial", 11), background="#f8f9fa")\
            .grid(row=i, column=0, sticky="w", padx=8, pady=8)

        if text == "Lo·∫°i":
            cb = ttk.Combobox(form, values=types, state="readonly", font=("Arial", 11))
            cb.current(0)
            cb.grid(row=i, column=1, padx=8, pady=8, sticky="ew")
            entries[text] = cb

        elif text == "Tr·∫°ng th√°i":
            cb = ttk.Combobox(form, values=statuses, state="readonly", font=("Arial", 11))
            cb.set(statuses[0])
            cb.grid(row=i, column=1, padx=8, pady=8, sticky="ew")
            entries[text] = cb

        else:
            ent = ttk.Entry(form, font=("Arial", 11))
            ent.grid(row=i, column=1, padx=8, pady=8, sticky="ew")
            entries[text] = ent

    form.grid_columnconfigure(1, weight=1)

    # --- N√∫t l∆∞u ---
    btn_frame = tk.Frame(win, bg="#f8f9fa")
    btn_frame.pack(pady=10)
    ttk.Button(btn_frame, text="üíæ L∆∞u s·∫£n ph·∫©m", style="Add.TButton",
             command=lambda: submit()).pack(ipadx=10, ipady=6)

    # --- H√†m submit ---
    def submit():
        try:
            ma = entries["M√£ SP"].get().strip().upper()
            ten = entries["T√™n s·∫£n ph·∫©m"].get().strip()
            loai = entries["Lo·∫°i"].get().strip()
            gia_raw = entries["ƒê∆°n gi√°"].get().strip().replace(",", "")
            trangthai = entries["Tr·∫°ng th√°i"].get().strip()

            # Ki·ªÉm tra d·ªØ li·ªáu
            if not ten:
                messagebox.showwarning("Thi·∫øu th√¥ng tin", "‚ö†Ô∏è T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.", parent=win)
                return

            try:
                gia = Decimal(gia_raw) if gia_raw != "" else Decimal(0)
                if gia < 0:
                    raise InvalidOperation("Gi√° ph·∫£i >= 0")
            except Exception:
                messagebox.showwarning("L·ªói", "ƒê∆°n gi√° kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë d∆∞∆°ng.", parent=win)
                return

            # Sinh m√£ t·ª± ƒë·ªông n·∫øu tr·ªëng
            if not ma:
                ma = generate_next_masp(db.cursor)

            # Ki·ªÉm tra tr√πng m√£
            db.cursor.execute("SELECT COUNT(*) FROM SANPHAM WHERE MaSP=?", (ma,))
            if db.cursor.fetchone()[0] > 0:
                messagebox.showwarning("Tr√πng m√£", f"‚ö†Ô∏è M√£ s·∫£n ph·∫©m {ma} ƒë√£ t·ªìn t·∫°i.", parent=win)
                return

            # Th√™m s·∫£n ph·∫©m
            query = """
                INSERT INTO SANPHAM (MaSP, TenSP, LoaiSP, DonGia, TrangThai)
                VALUES (?, ?, ?, ?, ?)
            """
            params = (ma, ten, loai, float(gia), trangthai)

            if execute_query(query, params):
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ th√™m s·∫£n ph·∫©m {ma} - {ten}.", parent=win)
                refresh()
                win.destroy()

        except Exception as e:
            db.conn.rollback()
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m: {e}", parent=win)


def edit_drink(tree, refresh):
    """S·ª≠a s·∫£n ph·∫©m (ƒë·ªìng b·ªô giao di·ªán v·ªõi add)"""
    sel = tree.selection()
    if not sel:
        messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn s·∫£n ph·∫©m c·∫ßn s·ª≠a.")
        return

    values = tree.item(sel[0])["values"]
    ma = values[0]

    # L·∫•y d·ªØ li·ªáu t·ª´ DB ch√≠nh x√°c (·ªü d·∫°ng ƒë·∫ßy ƒë·ªß)
    db.cursor.execute("SELECT MaSP, TenSP, LoaiSP, DonGia, TrangThai FROM SANPHAM WHERE MaSP=?", (ma,))
    row = db.cursor.fetchone()
    if not row:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong c∆° s·ªü d·ªØ li·ªáu.")
        return

    win = tk.Toplevel()
    win.title(f"‚úèÔ∏è S·ª≠a s·∫£n ph·∫©m {ma}")
    win.geometry("480x380")
    win.resizable(False, False)
    win.configure(bg="#f8f9fa")

    form = tk.Frame(win, bg="#f8f9fa")
    form.pack(padx=12, pady=12, fill="both", expand=True)

    labels = ["T√™n s·∫£n ph·∫©m", "Loai", "ƒê∆°n gi√°", "Tr·∫°ng th√°i"]
    entries = {}
    types = ["C√† ph√™", "Tr√† s·ªØa", "Sinh t·ªë", "N∆∞·ªõc ng·ªçt", "Kh√°c"]
    statuses = ["C√≥ h√†ng", "H·∫øt h√†ng", "Ng∆∞ng b√°n"]

    # current data
    current = {
        "Ten s·∫£n ph·∫©m": row.TenSP,
        "Ten s·∫£n ph·∫©m?": row.TenSP  
    }

    # Build fields
    for i, text in enumerate(labels):
        ttk.Label(form, text=text, font=("Arial", 11), background="#f8f9fa").grid(row=i, column=0, sticky="w", padx=8, pady=8)
        if text == "Lo·∫°i":
            cb = ttk.Combobox(form, values=types, state="readonly", font=("Arial", 11))
            cb.set(row.LoaiSP or types[0])
            cb.grid(row=i, column=1, padx=8, pady=8, sticky="ew")
            entries[text] = cb
        elif text == "Tr·∫°ng th√°i":
            cb = ttk.Combobox(form, values=statuses, state="readonly", font=("Arial", 11))
            cb.set(row.TrangThai or statuses[0])
            cb.grid(row=i, column=1, padx=8, pady=8, sticky="ew")
            entries[text] = cb
        elif text == "ƒê∆°n gi√°":
            ent = ttk.Entry(form, font=("Arial", 11))
            ent.insert(0, f"{int(row.DonGia):,}")
            ent.grid(row=i, column=1, padx=8, pady=8, sticky="ew")
            entries[text] = ent
        else:  # T√™n s·∫£n ph·∫©m
            ent = ttk.Entry(form, font=("Arial", 11))
            ent.insert(0, row.TenSP)
            ent.grid(row=i, column=1, padx=8, pady=8, sticky="ew")
            entries[text] = ent

    form.grid_columnconfigure(1, weight=1)

    btnf = tk.Frame(win, bg="#f8f9fa")
    btnf.pack(pady=8)

    def save():
        try:
            ten = entries["T√™n s·∫£n ph·∫©m"].get().strip()
            loai = entries["Lo·∫°i"].get().strip()
            gia_raw = entries["ƒê∆°n gi√°"].get().strip().replace(",", "")
            trangthai = entries["Tr·∫°ng th√°i"].get().strip()

            if not ten:
                messagebox.showwarning("Thi·∫øu th√¥ng tin", "T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
                return

            try:
                gia = Decimal(gia_raw) if gia_raw!="" else Decimal(0)
                if gia < 0:
                    raise InvalidOperation()
            except Exception:
                messagebox.showwarning("L·ªói", "ƒê∆°n gi√° kh√¥ng h·ª£p l·ªá.")
                return

            query = """
                UPDATE SANPHAM
                SET TenSP=?, LoaiSP=?, DonGia=?, TrangThai=?
                WHERE MaSP=?
            """
            params = (ten, loai, float(gia), trangthai, ma)

            if execute_query(query, params):
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ c·∫≠p nh·∫≠t {ma}")
                win.destroy()
                refresh()
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m: {e}")

    ttk.Button(btnf, text="üíæ L∆∞u", style="Add.TButton", command=save).pack(ipadx=10, ipady=6)


def delete_drink(tree, refresh):
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("‚ö†Ô∏è Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn s·∫£n ph·∫©m c·∫ßn x√≥a!")
        return

    values = tree.item(selected[0])["values"]
    masp = values[0]

    # G·ªçi helper ƒë·ªÉ x√≥a h√≥a ƒë∆°n
    safe_delete(
        table_name="SanPham",
        key_column="MaSP",
        key_value=masp,
        cursor=db.cursor,
        conn=db.conn,
        refresh_func=refresh,
        item_label="s·∫£n ph·∫©m"
    )