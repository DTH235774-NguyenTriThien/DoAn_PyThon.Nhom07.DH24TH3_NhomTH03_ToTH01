# app/modules/employees.py
import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
from app import db  # s·ª≠ d·ª•ng conn v√† cursor t·ª´ db.py

def open_window(parent):
    """Giao di·ªán qu·∫£n l√Ω nh√¢n vi√™n"""
    win = tk.Toplevel(parent)
    win.title("Qu·∫£n l√Ω nh√¢n vi√™n")
    win.geometry("950x500")
    win.configure(bg="#f9fafb")

    # ====== THANH TI√äU ƒê·ªÄ ======
    ttk.Label(win, text="üìã DANH S√ÅCH NH√ÇN VI√äN", font=("Arial", 14, "bold")).pack(pady=10)

    # ====== KHUNG T√åM KI·∫æM ======
    frame_top = ttk.Frame(win, padding=10)
    frame_top.pack(fill="x")
    tk.Label(frame_top, text="üîé T√¨m nh√¢n vi√™n:", font=("Arial", 11)).pack(side="left")
    search_var = tk.StringVar()
    entry_search = ttk.Entry(frame_top, textvariable=search_var, width=40)
    entry_search.pack(side="left", padx=8)
    ttk.Button(frame_top, text="T√¨m", command=lambda: load_data(search_var.get())).pack(side="left")
    ttk.Button(frame_top, text="T·∫£i l·∫°i", command=lambda: load_data()).pack(side="left", padx=5)

    # ====== KHUNG N√öT CH·ª®C NƒÇNG ======
    frame_btn = ttk.Frame(win, padding=10)
    frame_btn.pack(fill="x", pady=5)
    ttk.Button(frame_btn, text="‚ûï Th√™m", command=lambda: add_employee(load_data)).pack(side="left", padx=5)
    ttk.Button(frame_btn, text="‚úèÔ∏è S·ª≠a", command=lambda: edit_employee(tree, load_data)).pack(side="left", padx=5)
    ttk.Button(frame_btn, text="üóëÔ∏è X√≥a", command=lambda: delete_employee(tree, load_data)).pack(side="left", padx=5)

    # ====== B·∫¢NG HI·ªÇN TH·ªä ======
    columns = ("MaNV", "HoTen", "GioiTinh", "NgaySinh", "ChucVu", "LuongCoBan", "TrangThai")
    tree = ttk.Treeview(win, columns=columns, show="headings", height=15)
    for col in columns:
        tree.heading(col, text=col)
        tree.column(col, anchor="center", width=120)
    tree.pack(fill="both", expand=True, padx=10, pady=10)

    def load_data(keyword=None):
        for item in tree.get_children():
            tree.delete(item)
        query = "SELECT MaNV, HoTen, GioiTinh, NgaySinh, ChucVu, LuongCoBan, TrangThai FROM NhanVien"
        if keyword:
            query += " WHERE MaNV LIKE ? OR HoTen LIKE ?"
            db.cursor.execute(query, (f"%{keyword}%", f"%{keyword}%"))
        else:
            db.cursor.execute(query)
        rows = db.cursor.fetchall()
        for row in rows:
            tree.insert("", "end", values=[
                row.MaNV.strip(), row.HoTen, row.GioiTinh,
                row.NgaySinh.strftime("%d/%m/%Y") if row.NgaySinh else "",
                row.ChucVu, f"{int(row.LuongCoBan):,}", row.TrangThai
            ])

    load_data()  # T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu

def add_employee(refresh):
    """Th√™m nh√¢n vi√™n m·ªõi"""
    win = tk.Toplevel()
    win.title("Th√™m nh√¢n vi√™n m·ªõi")
    win.geometry("400x400")

    labels = ["M√£ NV", "H·ªç t√™n", "Gi·ªõi t√≠nh", "Ng√†y sinh (YYYY-MM-DD)",
              "Ch·ª©c v·ª•", "L∆∞∆°ng c∆° b·∫£n", "Tr·∫°ng th√°i"]
    entries = {}
    for i, text in enumerate(labels):
        ttk.Label(win, text=text).grid(row=i, column=0, padx=10, pady=5, sticky="w")
        entry = ttk.Entry(win, width=30)
        entry.grid(row=i, column=1, padx=10, pady=5)
        entries[text] = entry

    def submit():
        try:
            manv = entries["M√£ NV"].get().strip()
            hoten = entries["H·ªç t√™n"].get().strip()
            gt = entries["Gi·ªõi t√≠nh"].get().strip()
            ngs = entries["Ng√†y sinh (YYYY-MM-DD)"].get().strip()
            cv = entries["Ch·ª©c v·ª•"].get().strip()
            luong = float(entries["L∆∞∆°ng c∆° b·∫£n"].get().strip())
            tt = entries["Tr·∫°ng th√°i"].get().strip()
            if ngs:
                ngs = datetime.strptime(ngs, "%Y-%m-%d").date()
            db.cursor.execute("""
                INSERT INTO NhanVien (MaNV, HoTen, GioiTinh, NgaySinh, ChucVu, LuongCoBan, TrangThai)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (manv, hoten, gt, ngs, cv, luong, tt))
            db.conn.commit()
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ th√™m nh√¢n vi√™n m·ªõi!")
            win.destroy()
            refresh()
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m: {e}")

    ttk.Button(win, text="L∆∞u", command=submit).grid(row=len(labels), column=0, columnspan=2, pady=10)

def edit_employee(tree, refresh):
    """S·ª≠a th√¥ng tin nh√¢n vi√™n"""
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn nh√¢n vi√™n c·∫ßn s·ª≠a!")
        return
    values = tree.item(selected[0])["values"]
    manv = values[0]

    win = tk.Toplevel()
    win.title(f"S·ª≠a nh√¢n vi√™n {manv}")
    win.geometry("400x400")

    columns = ["H·ªç t√™n", "Gi·ªõi t√≠nh", "Ng√†y sinh (YYYY-MM-DD)",
               "Ch·ª©c v·ª•", "L∆∞∆°ng c∆° b·∫£n", "Tr·∫°ng th√°i"]
    entries = {}
    current = dict(zip(columns, values[1:]))
    for i, text in enumerate(columns):
        ttk.Label(win, text=text).grid(row=i, column=0, padx=10, pady=5, sticky="w")
        entry = ttk.Entry(win, width=30)
        entry.grid(row=i, column=1, padx=10, pady=5)
        entry.insert(0, current[text])
        entries[text] = entry

    def save():
        try:
            hoten = entries["H·ªç t√™n"].get().strip()
            gt = entries["Gi·ªõi t√≠nh"].get().strip()
            ngs = entries["Ng√†y sinh (YYYY-MM-DD)"].get().strip()
            cv = entries["Ch·ª©c v·ª•"].get().strip()
            luong = float(entries["L∆∞∆°ng c∆° b·∫£n"].get().replace(",", "").strip())
            tt = entries["Tr·∫°ng th√°i"].get().strip()
            if ngs:
                ngs = datetime.strptime(ngs, "%Y-%m-%d").date()
            db.cursor.execute("""
                UPDATE NhanVien
                SET HoTen=?, GioiTinh=?, NgaySinh=?, ChucVu=?, LuongCoBan=?, TrangThai=?
                WHERE MaNV=?
            """, (hoten, gt, ngs, cv, luong, tt, manv))
            db.conn.commit()
            messagebox.showinfo("Th√†nh c√¥ng", "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!")
            win.destroy()
            refresh()
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t: {e}")

    ttk.Button(win, text="L∆∞u", command=save).grid(row=len(columns), column=0, columnspan=2, pady=10)

def delete_employee(tree, refresh):
    """X√≥a nh√¢n vi√™n"""
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn nh√¢n vi√™n c·∫ßn x√≥a!")
        return
    values = tree.item(selected[0])["values"]
    manv = values[0]
    if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh√¢n vi√™n {manv}?"):
        try:
            db.cursor.execute("DELETE FROM NhanVien WHERE MaNV=?", (manv,))
            db.conn.commit()
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a nh√¢n vi√™n.")
            refresh()
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a: {e}")
