# app/modules/pos.py
import tkinter as tk
from tkinter import ttk, messagebox
from app import db
from app.db import fetch_query
from app.theme import setup_styles
from decimal import Decimal, InvalidOperation

# --- H√ÄM CH√çNH (GIAI ƒêO·∫†N 2: LOGIC GI·ªé H√ÄNG) ---
def create_pos_module(parent_frame, username, on_back_callback):
    """Giao di·ªán ch√≠nh cho Module B√°n h√†ng (POS)"""
    
    setup_styles()

    # --- Frame ch√≠nh c·ªßa module ---
    module_frame = tk.Frame(parent_frame, bg="#f5e6ca")
    
    # --- Header ---
    header = tk.Frame(module_frame, bg="#4b2e05", height=70)
    header.pack(fill="x")
    
    tk.Label(header, text="üõí B√ÅN H√ÄNG T·∫†I QU·∫¶Y (POS)", bg="#4b2e05", fg="white",
             font=("Segoe UI", 16, "bold")).pack(side="left", padx=15, pady=12)
    
    ttk.Button(header, text="‚¨Ö Quay l·∫°i", style="Close.TButton",
             command=on_back_callback).pack(side="right", padx=15)

    # --- Khung Giao di·ªán 3 C·ªôt (d√πng GRID) ---
    main_content_frame = tk.Frame(module_frame, bg="#f5e6ca")
    main_content_frame.pack(fill="both", expand=True, padx=10, pady=10)
    
    main_content_frame.grid_rowconfigure(0, weight=1)
    main_content_frame.grid_columnconfigure(0, weight=2, uniform="group1") 
    main_content_frame.grid_columnconfigure(1, weight=3, uniform="group1") 
    main_content_frame.grid_columnconfigure(2, weight=2, uniform="group1") 

    # =========================================================
    # C·ªòT 2: GI·ªé H√ÄNG (ƒê·ªäNH NGHƒ®A TR∆Ø·ªöC V√å C·ªòT 1 V√Ä 3 S·∫º G·ªåI N√ì)
    # =========================================================
    cart_frame = ttk.LabelFrame(main_content_frame, text=" 2. Gi·ªè H√†ng ")
    cart_frame.grid(row=0, column=1, sticky="nsew", padx=5)
    cart_frame.grid_rowconfigure(0, weight=1)
    cart_frame.grid_columnconfigure(0, weight=1)

    cart_cols = ("MaSP", "TenSP", "SL", "DonGia", "ThanhTien")
    tree_cart = ttk.Treeview(cart_frame, columns=cart_cols, show="headings", height=15)
    tree_cart.heading("MaSP", text="M√£ SP"); tree_cart.column("MaSP", width=60, anchor="center")
    tree_cart.heading("TenSP", text="T√™n S·∫£n Ph·∫©m"); tree_cart.column("TenSP", width=180, anchor="w")
    tree_cart.heading("SL", text="SL"); tree_cart.column("SL", width=40, anchor="center")
    tree_cart.heading("DonGia", text="ƒê∆°n Gi√°"); tree_cart.column("DonGia", width=80, anchor="e")
    tree_cart.heading("ThanhTien", text="Th√†nh Ti·ªÅn"); tree_cart.column("ThanhTien", width=100, anchor="e")
    tree_cart.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)

    # --- Khung T·ªïng ti·ªÅn ---
    total_frame = tk.Frame(cart_frame, bg="#f5e6ca")
    total_frame.grid(row=1, column=0, sticky="sew", padx=5, pady=5)
    total_frame.grid_columnconfigure(1, weight=1) 

    total_var = tk.StringVar(value="0 ƒë")
    discount_var = tk.StringVar(value="0 ƒë")
    final_total_var = tk.StringVar(value="0 ƒë")

    ttk.Label(total_frame, text="T·ªïng c·ªông:", font=("Segoe UI", 12)).grid(row=0, column=0, sticky="w", padx=5)
    ttk.Label(total_frame, textvariable=total_var, font=("Segoe UI", 12)).grid(row=0, column=1, sticky="e", padx=5)
    
    ttk.Label(total_frame, text="Gi·∫£m gi√° (ƒêi·ªÉm):", font=("Segoe UI", 12)).grid(row=1, column=0, sticky="w", padx=5)
    ttk.Label(total_frame, textvariable=discount_var, font=("Segoe UI", 12)).grid(row=1, column=1, sticky="e", padx=5)
    
    ttk.Label(total_frame, text="KH√ÅCH C·∫¶N TR·∫¢:", font=("Segoe UI", 16, "bold"), foreground="#d32f2f").grid(row=2, column=0, sticky="w", padx=5, pady=5)
    ttk.Label(total_frame, textvariable=final_total_var, font=("Segoe UI", 16, "bold"), foreground="#d32f2f").grid(row=2, column=1, sticky="e", padx=5, pady=5)

    # =========================================================
    # S·ª¨A 4: VI·∫æT H√ÄM C·∫¨P NH·∫¨T T·ªîNG TI·ªÄN
    # =========================================================
    def update_totals():
        """T√≠nh to√°n v√† c·∫≠p nh·∫≠t 3 nh√£n t·ªïng ti·ªÅn d·ª±a tr√™n tree_cart."""
        total = Decimal(0.0)
        
        for item_id in tree_cart.get_children():
            values = tree_cart.item(item_id, "values")
            # C·ªôt 4 l√† "ThanhTien"
            try:
                # Lo·∫°i b·ªè d·∫•u ph·∫©y (,) v√† ch·ªØ 'ƒë' n·∫øu c√≥
                thanh_tien_str = str(values[4]).replace(",", "").split(" ")[0]
                total += Decimal(thanh_tien_str)
            except (IndexError, InvalidOperation, TypeError):
                pass # B·ªè qua n·∫øu d√≤ng kh√¥ng h·ª£p l·ªá
        
        # (Giai ƒëo·∫°n 2: Gi·∫£m gi√° lu√¥n b·∫±ng 0)
        discount = Decimal(0.0) 
        final_total = total - discount

        # C·∫≠p nh·∫≠t c√°c bi·∫øn StringVar (Label)
        total_var.set(f"{int(total):,} ƒë")
        discount_var.set(f"{int(discount):,} ƒë")
        final_total_var.set(f"{int(final_total):,} ƒë")


    # =========================================================
    # S·ª¨A 2: VI·∫æT C√ÅC H√ÄM X·ª¨ L√ù GI·ªé H√ÄNG
    # =========================================================
    def add_item_to_cart(product_info):
        """Th√™m 1 s·∫£n ph·∫©m v√†o gi·ªè h√†ng ho·∫∑c tƒÉng s·ªë l∆∞·ª£ng n·∫øu ƒë√£ t·ªìn t·∫°i."""
        masp = product_info['MaSP']
        tensp = product_info['TenSP']
        dongia = Decimal(product_info['DonGia'])
        
        # Ki·ªÉm tra xem MaSP ƒë√£ c√≥ trong gi·ªè h√†ng (Treeview) ch∆∞a
        item = tree_cart.exists(masp)
        
        if item:
            # N·∫øu c√≥, tƒÉng s·ªë l∆∞·ª£ng
            tree_cart.selection_set(masp) # Ch·ªçn d√≤ng ƒë√≥
            tree_cart.focus(masp) # ƒê·∫∑t focus v√†o tr∆∞·ªõc khi g·ªçi h√†m tƒÉng s·ªë l∆∞·ª£ng
            increment_quantity() # G·ªçi h√†m tƒÉng SL
        else:
            # N·∫øu ch∆∞a, th√™m d√≤ng m·ªõi
            sl = 1
            thanh_tien = sl * dongia
            values = (
                masp, 
                tensp, 
                sl, 
                f"{int(dongia):,}", 
                f"{int(thanh_tien):,}"
            )
            # D√πng MaSP l√†m ID (iid) c·ªßa d√≤ng
            tree_cart.insert("", "end", iid=masp, values=values)
        
        update_totals() # C·∫≠p nh·∫≠t t·ªïng ti·ªÅn

    def increment_quantity():
        """TƒÉng s·ªë l∆∞·ª£ng c·ªßa m√≥n ƒëang ch·ªçn l√™n 1."""
        selected_iid = tree_cart.focus()
        if not selected_iid:
            return

        values = tree_cart.item(selected_iid, "values")
        masp, tensp = values[0], values[1]
        sl = int(values[2])
        dongia_str = str(values[3]).replace(",", "")
        dongia = Decimal(dongia_str)

        sl_moi = sl + 1
        thanh_tien_moi = sl_moi * dongia
        
        new_values = (
            masp, 
            tensp, 
            sl_moi, 
            f"{int(dongia):,}", 
            f"{int(thanh_tien_moi):,}"
        )
        tree_cart.item(selected_iid, values=new_values)
        update_totals()

    def decrement_quantity():
        """Gi·∫£m s·ªë l∆∞·ª£ng c·ªßa m√≥n ƒëang ch·ªçn ƒëi 1. N·∫øu v·ªÅ 0 th√¨ x√≥a."""
        selected_iid = tree_cart.focus()
        if not selected_iid:
            return

        values = tree_cart.item(selected_iid, "values")
        masp, tensp = values[0], values[1]
        sl = int(values[2])
        dongia_str = str(values[3]).replace(",", "")
        dongia = Decimal(dongia_str)

        sl_moi = sl - 1
        
        if sl_moi <= 0:
            # N·∫øu v·ªÅ 0, x√≥a lu√¥n
            remove_item_from_cart()
        else:
            thanh_tien_moi = sl_moi * dongia
            new_values = (
                masp, 
                tensp, 
                sl_moi, 
                f"{int(dongia):,}", 
                f"{int(thanh_tien_moi):,}"
            )
            tree_cart.item(selected_iid, values=new_values)
            update_totals()

    def remove_item_from_cart():
        """X√≥a m√≥n ƒëang ch·ªçn kh·ªèi gi·ªè h√†ng."""
        selected_iid = tree_cart.focus()
        if not selected_iid:
            return
        
        tree_cart.delete(selected_iid)
        update_totals()

    def clear_cart():
        """X√≥a t·∫•t c·∫£ c√°c m√≥n kh·ªèi gi·ªè h√†ng v√† reset."""
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy h√≥a ƒë∆°n n√†y?"):
            tree_cart.delete(*tree_cart.get_children())
            
            # (Giai ƒëo·∫°n 2: T·∫°m th·ªùi reset lu√¥n kh√°ch h√†ng)
            lbl_cust_info.config(text="Kh√°ch: [V√£ng lai]")
            entry_cust_search.delete(0, tk.END)
            
            update_totals()

    # =========================================================
    # C·ªòT 1: DANH S√ÅCH S·∫¢N PH·∫®M (MENU)
    # =========================================================
    product_frame = ttk.LabelFrame(main_content_frame, text=" 1. Ch·ªçn M√≥n ")
    product_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 5))
    product_frame.grid_rowconfigure(0, weight=1)
    product_frame.grid_columnconfigure(0, weight=1)

    canvas_frame = tk.Frame(product_frame, bg="white")
    canvas_frame.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
    canvas_frame.grid_rowconfigure(0, weight=1)
    canvas_frame.grid_columnconfigure(0, weight=1)

    scrollbar = ttk.Scrollbar(canvas_frame, orient="vertical")
    scrollbar.grid(row=0, column=1, sticky="ns")

    canvas = tk.Canvas(canvas_frame, yscrollcommand=scrollbar.set, bg="white", highlightthickness=0)
    canvas.grid(row=0, column=0, sticky="nsew")

    scrollbar.config(command=canvas.yview)

    scrollable_frame = tk.Frame(canvas, bg="white")
    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")

    def configure_scrollregion(event):
        canvas.configure(scrollregion=canvas.bbox("all"))
    scrollable_frame.bind("<Configure>", configure_scrollregion)

    def load_product_buttons(parent):
        """T·∫£i c√°c n√∫t s·∫£n ph·∫©m t·ª´ CSDL v√† hi·ªÉn th·ªã"""
        try:
            products = fetch_query("SELECT MaSP, TenSP, DonGia FROM SanPham WHERE TrangThai = N'C√≤n b√°n' ORDER BY TenSP")
            
            row, col = 0, 0
            for prod in products:
                gia = f"{int(prod['DonGia']):,}"
                btn_text = f"{prod['TenSP']}\n({gia} ƒë)"
                
                # S·ª¨A 1: G√ÅN L·ªÜNH (COMMAND) CHO N√öT
                # D√πng lambda ƒë·ªÉ truy·ªÅn th√¥ng tin s·∫£n ph·∫©m v√†o h√†m
                prod_info = prod # T·∫°o b·∫£n sao
                btn = ttk.Button(parent, text=btn_text, style="Product.TButton", 
                                 command=lambda p=prod_info: add_item_to_cart(p)) 
                
                btn.grid(row=row, column=col, sticky="nsew", padx=4, pady=4, ipady=15)
                
                col += 1
                if col > 1:
                    col = 0
                    row += 1
            
            parent.grid_columnconfigure(0, weight=1)
            parent.grid_columnconfigure(1, weight=1)

        except Exception as e:
            ttk.Label(parent, text=f"L·ªói t·∫£i s·∫£n ph·∫©m: {e}").pack()

    load_product_buttons(scrollable_frame)

    # =========================================================
    # C·ªòT 3: ƒêI·ªÄU KHI·ªÇN & THANH TO√ÅN
    # =========================================================
    controls_frame = tk.Frame(main_content_frame, bg="#f5e6ca")
    controls_frame.grid(row=0, column=2, sticky="nsew", padx=(5, 0))
    controls_frame.grid_columnconfigure(0, weight=1) 

    # --- Khung Kh√°ch h√†ng ---
    cust_group = ttk.LabelFrame(controls_frame, text=" 3. Kh√°ch h√†ng (T√πy ch·ªçn) ")
    cust_group.grid(row=0, column=0, sticky="new", pady=(0, 10))
    cust_group.grid_columnconfigure(0, weight=1)
    
    entry_cust_search = ttk.Entry(cust_group, font=("Arial", 11), width=15)
    entry_cust_search.grid(row=0, column=0, sticky="ew", padx=5, pady=5)
    ttk.Button(cust_group, text="T√¨m SƒêT/M√£").grid(row=0, column=1, padx=5, pady=5)
    
    lbl_cust_info = ttk.Label(cust_group, text="Kh√°ch: [V√£ng lai]", font=("Arial", 10, "italic"))
    lbl_cust_info.grid(row=1, column=0, columnspan=2, sticky="w", padx=5, pady=5)

    # --- Khung ƒêi·ªÅu ch·ªânh Gi·ªè h√†ng ---
    cart_adj_group = ttk.LabelFrame(controls_frame, text=" 4. ƒêi·ªÅu ch·ªânh Gi·ªè h√†ng ")
    cart_adj_group.grid(row=1, column=0, sticky="new", pady=5)
    cart_adj_group.grid_columnconfigure(0, weight=1)
    cart_adj_group.grid_columnconfigure(1, weight=1)
    cart_adj_group.grid_columnconfigure(2, weight=1)
    
    # S·ª¨A 3: G√ÅN L·ªÜNH CHO C√ÅC N√öT ƒêI·ªÄU KHI·ªÇN
    ttk.Button(cart_adj_group, text="TƒÉng SL (+)", style="Edit.TButton", 
               command=increment_quantity).grid(row=0, column=0, sticky="ew", padx=5, pady=5)
    ttk.Button(cart_adj_group, text="Gi·∫£m SL (-)", style="Edit.TButton",
               command=decrement_quantity).grid(row=0, column=1, sticky="ew", padx=5, pady=5)
    ttk.Button(cart_adj_group, text="X√≥a M√≥n", style="Delete.TButton",
               command=remove_item_from_cart).grid(row=0, column=2, sticky="ew", padx=5, pady=5)

    # --- Khung Thanh to√°n ---
    payment_group = ttk.LabelFrame(controls_frame, text=" 5. Ho√†n t·∫•t ")
    payment_group.grid(row=2, column=0, sticky="new", pady=10)
    payment_group.grid_columnconfigure(0, weight=1)
    payment_group.grid_columnconfigure(1, weight=1)

    ttk.Button(payment_group, text="‚úÖ THANH TO√ÅN", style="Add.TButton",
               command=None).grid(row=0, column=0, columnspan=2, sticky="ew", padx=5, pady=5, ipady=15)
    
    ttk.Button(payment_group, text="‚ùå H·ªßy B·ªè", style="Delete.TButton",
               command=clear_cart).grid(row=1, column=0, sticky="ew", padx=5, pady=5, ipady=8)
    
    # N√∫t T·∫°m t√≠nh c≈©ng g·ªçi update_totals ƒë·ªÉ ƒë·∫£m b·∫£o
    ttk.Button(payment_group, text="üí∞ T·∫°m t√≠nh", style="Close.TButton",
               command=update_totals).grid(row=1, column=1, sticky="ew", padx=5, pady=5, ipady=8)
    
    # --- Tr·∫£ v·ªÅ frame ch√≠nh ---
    return module_frame