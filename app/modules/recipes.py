# app/modules/recipes.py
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from decimal import Decimal, InvalidOperation
from app import db
from app.theme import setup_styles

# Import c√°c helper chu·∫©n c·ªßa d·ª± √°n
from app.db import fetch_query, execute_query, execute_scalar
# S·ª¨A 1: X√≥a c√°c import kh√¥ng c·∫ßn thi·∫øt (go_back, clear_window, v.v...)
# from app.utils.utils import clear_window, create_form_window, go_back, center_window
from app.utils.business_helpers import safe_delete
from app.utils.treeview_helpers import fill_treeview_chunked

# =========================================================
# T·ª™ ƒêI·ªÇN V√Ä CACHE NGUY√äN LI·ªÜU (Gi·ªØ nguy√™n)
# =========================================================

RECIPE_FOOD_MAP = {
    # C√† ph√™
    "C√† ph√™ h·∫°t": "g", "C√† ph√™ b·ªôt": "g",
    # S·ªØa
    "S·ªØa ƒë·∫∑c": "ml", "S·ªØa t∆∞∆°i": "ml", "Kem b√©o (Rich)": "ml",
    "Kem (Whipping Cream)": "ml", "S·ªØa chua": "g",
    # ƒê∆∞·ªùng / Siro
    "ƒê∆∞·ªùng c√°t": "g", "ƒê∆∞·ªùng n∆∞·ªõc": "ml", "Siro Caramel": "ml", "Siro Vani": "ml",
    "Siro B·∫°c h√†": "ml", "Siro D√¢u": "ml", "M·∫≠t ong": "ml", "S·ªët Chocolate": "g",
    # Tr√†
    "Tr√† ƒëen": "g", "Tr√† l√†i": "g", "Tr√† √¥ long": "g",
    "B·ªôt Matcha": "g", "B·ªôt Cacao": "g", "B·ªôt Frappe (Base)": "g",
    # Tr√°i c√¢y (ƒë√£ chu·∫©n h√≥a 'g')
    "Cam": "g", 
    "Chanh": "g", 
    "D√¢u t√¢y": "g", 
    "D√¢u t√¢y (t∆∞∆°i)": "g", 
    "B∆°": "g", 
    "Xo√†i": "g", 
    # Tr√°i c√¢y (ng√¢m)
    "ƒê√†o (ng√¢m)": "h·ªôp", 
    "V·∫£i (ng√¢m)": "h·ªôp",
    # Kh√°c
    "Tr√¢n ch√¢u": "g", 
    "ƒê√° vi√™n": "kg",
    "Mu·ªëi": "g",
    "ƒê∆∞·ªùng": "g",
    "ƒê∆∞·ªùng ph√®n": "g",
    "N∆∞·ªõc l·ªçc": "ml",
}

# Bi·∫øn cache t·ªïng (ch·ªâ ch·ª©a key)
_master_ingredient_keys = [] 
_ingredient_map = {} 

def load_ingredient_cache():
    """T·∫£i v√† cache danh s√°ch NGUY√äN LI·ªÜU TH·ª∞C PH·∫®M (l·ªçc b·ªè V·∫≠t t∆∞ V√Ä ƒë∆°n v·ªã c≈©)"""
    global _ingredient_map, _master_ingredient_keys
    if not _ingredient_map:
        try:
            rows = db.fetch_query("SELECT MaNL, TenNL, DonVi FROM NguyenLieu ORDER BY TenNL")
            
            _ingredient_map = {}
            
            # L·ªçc nghi√™m ng·∫∑t: Ph·∫£i kh·ªõp c·∫£ T√™n V√Ä ƒê∆°n v·ªã
            for r in rows:
                ten_nl = r['TenNL']
                don_vi = r['DonVi']
                
                # 1. Ki·ªÉm tra xem T√™n c√≥ trong MAP chu·∫©n kh√¥ng
                if ten_nl in RECIPE_FOOD_MAP:
                    # 2. Ki·ªÉm tra xem ƒê∆°n v·ªã c√≥ kh·ªõp v·ªõi MAP chu·∫©n kh√¥ng
                    if RECIPE_FOOD_MAP[ten_nl] == don_vi:
                        # CH·ªà KHI KH·ªöP C·∫¢ 2, M·ªöI TH√äM V√ÄO COMBOBOX
                        key = f"{r['MaNL'].strip()} - {ten_nl} ({don_vi})"
                        _ingredient_map[key] = r['MaNL'].strip()
            
            _master_ingredient_keys = sorted(_ingredient_map.keys())
            
        except Exception as e:
            print(f"L·ªói t·∫£i cache nguy√™n li·ªáu: {e}")
            _ingredient_map = {}
            _master_ingredient_keys = []

# --- H√ÄM CH√çNH HI·ªÇN TH·ªä MODULE ---
# S·ª¨A 2: ƒê·ªïi t√™n h√†m
# S·ª¨A 3: Thay ƒë·ªïi ch·ªØ k√Ω h√†m (b·ªè username, role, on_exit_callback)
def create_recipes_module(parent_frame, on_back_callback):
    
    # S·ª¨A 4: X√≥a c√°c l·ªánh ƒëi·ªÅu khi·ªÉn c·ª≠a s·ªï (root)
    # clear_window(root)
    setup_styles()
    # root.title("üìú Qu·∫£n l√Ω C√¥ng th·ª©c S·∫£n ph·∫©m")
    # root.configure(bg="#f5e6ca")
    # center_window(root, 1200, 700, offset_y=-60)
    # root.minsize(1000, 600)

    # S·ª¨A 5: T·∫°o frame ch√≠nh b√™n trong parent_frame
    module_frame = tk.Frame(parent_frame, bg="#f5e6ca")
    # KH√îNG PACK() ·ªü ƒë√¢y, ƒë·ªÉ mainmenu ki·ªÉm so√°t

    # S·ª¨A 6: G·∫Øn c√°c widget con v√†o 'module_frame'

    # --- Header & N√∫t Quay l·∫°i ---
    header = tk.Frame(module_frame, bg="#4b2e05", height=70)
    header.pack(fill="x")
    tk.Label(header, text="üìú QU·∫¢N L√ù C√îNG TH·ª®C S·∫¢N PH·∫®M", bg="#4b2e05", fg="white",
             font=("Segoe UI", 16, "bold")).pack(pady=12)
    
    top_frame = tk.Frame(module_frame, bg="#f9fafb")
    top_frame.pack(fill="x", pady=10, padx=10)
    
    # S·ª¨A 7: C·∫≠p nh·∫≠t n√∫t "Quay l·∫°i"
    ttk.Button(top_frame, text="‚¨Ö Quay l·∫°i", style="Close.TButton",
             command=on_back_callback).pack(side="right", padx=5)

    # --- Khung ch·ª©a 2 panel ch√≠nh ---
    main_frame = tk.Frame(module_frame, bg="#f5e6ca")
    main_frame.pack(fill="both", expand=True, padx=10, pady=10)

    # --- KHUNG B√äN TR√ÅI (DANH S√ÅCH S·∫¢N PH·∫®M) ---
    left_panel = tk.Frame(main_frame, bg="#f9fafb", relief="solid", borderwidth=1)
    left_panel.pack(side="left", fill="both", expand=True, padx=(0, 5))
    tk.Label(left_panel, text="1. Ch·ªçn S·∫£n ph·∫©m ƒë·ªÉ xem/s·ª≠a c√¥ng th·ª©c", 
             font=("Segoe UI", 12, "bold"), bg="#f9fafb", fg="#4b2e05").pack(pady=10)
    status_label_products = tk.StringVar(value="ƒêang t·∫£i s·∫£n ph·∫©m...")
    ttk.Label(left_panel, textvariable=status_label_products, font=("Arial", 10, "italic"), 
              background="#f9fafb", foreground="blue").pack(anchor="w", padx=10)
    tree_products = ttk.Treeview(left_panel, columns=("MaSP", "TenSP", "DonGia"), show="headings", height=20)
    tree_products.heading("MaSP", text="M√£ SP"); tree_products.heading("TenSP", text="T√™n S·∫£n Ph·∫©m"); tree_products.heading("DonGia", text="ƒê∆°n gi√°")
    tree_products.column("MaSP", width=80, anchor="center"); tree_products.column("TenSP", width=250, anchor="w"); tree_products.column("DonGia", width=100, anchor="e")
    tree_products.pack(fill="both", expand=True, padx=10, pady=10)
    
    # --- KHUNG B√äN PH·∫¢I (C√îNG TH·ª®C CHI TI·∫æT) ---
    right_panel = tk.Frame(main_frame, bg="#f9fafb", relief="solid", borderwidth=1)
    right_panel.pack(side="right", fill="both", expand=True, padx=(5, 0))
    lbl_recipe_title = tk.Label(right_panel, text="2. C√¥ng th·ª©c cho: [Ch∆∞a ch·ªçn]", 
                                 font=("Segoe UI", 12, "bold"), bg="#f9fafb", fg="#4b2e05")
    lbl_recipe_title.pack(pady=10)
    status_label_recipe = tk.StringVar(value="")
    ttk.Label(right_panel, textvariable=status_label_recipe, font=("Arial", 10, "italic"), 
              background="#f9fafb", foreground="blue").pack(anchor="w", padx=10)
    tree_recipe = ttk.Treeview(right_panel, columns=("MaNL", "TenNL", "SoLuong", "DonVi"), show="headings", height=15)
    tree_recipe.heading("MaNL", text="M√£ NL"); tree_recipe.heading("TenNL", text="T√™n Nguy√™n Li·ªáu"); tree_recipe.heading("SoLuong", text="S·ªë l∆∞·ª£ng"); tree_recipe.heading("DonVi", text="ƒê∆°n v·ªã")
    tree_recipe.column("MaNL", width=80, anchor="center"); tree_recipe.column("TenNL", width=200, anchor="w"); tree_recipe.column("SoLuong", width=80, anchor="e"); tree_recipe.column("DonVi", width=80, anchor="center")
    tree_recipe.pack(fill="both", expand=True, padx=10, pady=(5, 10))

    # --- Khung Th√™m/X√≥a Nguy√™n li·ªáu (C·∫£i ti·∫øn 2) ---
    controls_frame = tk.Frame(right_panel, bg="#f9fafb")
    controls_frame.pack(fill="x", padx=10, pady=5)
    
    load_ingredient_cache()
    
    ttk.Label(controls_frame, text="T√¨m/Ch·ªçn Nguy√™n li·ªáu:", background="#f9fafb").grid(row=0, column=0, columnspan=2, padx=5, sticky="w")
    entry_search_nl_var = tk.StringVar()
    entry_search_nl = ttk.Entry(controls_frame, textvariable=entry_search_nl_var, width=40, font=("Arial", 10))
    entry_search_nl.grid(row=1, column=0, padx=5, pady=5, sticky="we")

    cb_ingredients_var = tk.StringVar()
    cb_ingredients = ttk.Combobox(controls_frame, textvariable=cb_ingredients_var, 
                                  values=_master_ingredient_keys, state="readonly", width=40)
    cb_ingredients.grid(row=2, column=0, padx=5, pady=5, sticky="we")
    
    ttk.Label(controls_frame, text="S·ªë l∆∞·ª£ng:", background="#f9fafb").grid(row=1, column=1, padx=5, sticky="w")
    entry_qty_var = tk.StringVar()
    entry_qty = ttk.Entry(controls_frame, textvariable=entry_qty_var, width=10)
    entry_qty.grid(row=2, column=1, padx=5, pady=5, sticky="w")
    
    btn_add_to_recipe = ttk.Button(controls_frame, text="‚ûï Th√™m/C·∫≠p nh·∫≠t", style="Add.TButton",
                                   command=lambda: add_ingredient_to_recipe())
    btn_add_to_recipe.grid(row=2, column=2, padx=5, pady=5)
    
    btn_remove_from_recipe = ttk.Button(controls_frame, text="üóë X√≥a", style="Delete.TButton",
                                        command=lambda: remove_ingredient_from_recipe())
    btn_remove_from_recipe.grid(row=2, column=3, padx=5, pady=5)
    
    controls_frame.grid_columnconfigure(0, weight=1)

    def _filter_ingredient_combobox(*args):
        keyword = entry_search_nl_var.get().lower()
        if not keyword:
            cb_ingredients['values'] = _master_ingredient_keys
        else:
            filtered_list = [key for key in _master_ingredient_keys if keyword in key.lower()]
            cb_ingredients['values'] = filtered_list
            if filtered_list:
                cb_ingredients_var.set(filtered_list[0]) 
            else:
                cb_ingredients_var.set("")
                
    entry_search_nl_var.trace_add("write", _filter_ingredient_combobox)

    # --- LOGIC & H√ÄM X·ª¨ L√ù (Gi·ªØ nguy√™n) ---
    def load_all_products():
        status_label_products.set("ƒêang t·∫£i s·∫£n ph·∫©m...")
        tree_products.update_idletasks()
        query = "SELECT MaSP, TenSP, DonGia FROM SanPham ORDER BY MaSP"
        try:
            rows = db.fetch_query(query)
            tree_data = []
            for r in rows:
                values_tuple = (r['MaSP'], r['TenSP'], f"{int(r['DonGia']):,}")
                tree_data.append({"iid": r['MaSP'], "values": values_tuple})
            fill_treeview_chunked(
                tree_products, 
                tree_data, 
                on_complete=lambda: status_label_products.set(f"ƒê√£ t·∫£i {len(rows)} s·∫£n ph·∫©m.")
            )
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m: {e}")
            status_label_products.set("L·ªói t·∫£i s·∫£n ph·∫©m!")
            
    def load_recipe_for_product(masp, tensp):
        lbl_recipe_title.config(text=f"2. C√¥ng th·ª©c cho: {tensp} ({masp})")
        status_label_recipe.set("ƒêang t·∫£i c√¥ng th·ª©c...")
        tree_recipe.update_idletasks()
        query = """
            SELECT ct.MaNL, nl.TenNL, ct.SoLuong, nl.DonVi
            FROM CongThuc ct
            JOIN NguyenLieu nl ON ct.MaNL = nl.MaNL
            WHERE ct.MaSP = ?
            ORDER BY nl.TenNL
        """
        try:
            rows = db.fetch_query(query, (masp,))
            tree_data = []
            for r in rows:
                soluong_f = f"{Decimal(r['SoLuong']):.3f}".rstrip('0').rstrip('.')
                values_tuple = (r['MaNL'], r['TenNL'], soluong_f, r['DonVi'])
                tree_data.append({"iid": r['MaNL'], "values": values_tuple})
            fill_treeview_chunked(
                tree_recipe, 
                tree_data, 
                on_complete=lambda: status_label_recipe.set(f"C√¥ng th·ª©c c√≥ {len(rows)} nguy√™n li·ªáu.")
            )
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i c√¥ng th·ª©c: {e}")
            status_label_recipe.set("L·ªói t·∫£i c√¥ng th·ª©c!")
            
    def on_product_select(event=None):
        selected = tree_products.selection()
        if not selected:
            return
        masp = selected[0]
        tensp = tree_products.item(masp, "values")[1]
        load_recipe_for_product(masp, tensp)
    tree_products.bind("<<TreeviewSelect>>", on_product_select)

    def add_ingredient_to_recipe():
        selected_product = tree_products.selection()
        if not selected_product:
            # S·ª¨A 8: Thay parent=root th√†nh parent=parent_frame
            messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn m·ªôt S·∫¢N PH·∫®M ·ªü c√¢y b√™n tr√°i tr∆∞·ªõc.", parent=parent_frame)
            return
        masp = selected_product[0]
        nl_key = cb_ingredients_var.get()
        if not nl_key:
            messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn m·ªôt NGUY√äN LI·ªÜU ƒë·ªÉ th√™m.", parent=parent_frame)
            return
        manl = _ingredient_map.get(nl_key)
        try:
            qty = Decimal(entry_qty_var.get())
            if qty <= 0: raise ValueError
        except (InvalidOperation, ValueError):
            messagebox.showwarning("L·ªói", "S·ªë l∆∞·ª£ng ph·∫£i l√† m·ªôt s·ªë > 0.", parent=parent_frame)
            return
        try:
            exists = db.execute_scalar("SELECT COUNT(*) FROM CongThuc WHERE MaSP = ? AND MaNL = ?", (masp, manl))
            if exists > 0:
                query = "UPDATE CongThuc SET SoLuong = ? WHERE MaSP = ? AND MaNL = ?"
                params = (qty, masp, manl)
                action = "c·∫≠p nh·∫≠t"
            else:
                query = "INSERT INTO CongThuc (MaSP, MaNL, SoLuong) VALUES (?, ?, ?)"
                params = (masp, manl, qty)
                action = "th√™m"
            if db.execute_query(query, params):
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ {action} nguy√™n li·ªáu v√†o c√¥ng th·ª©c.", parent=parent_frame)
                tensp = tree_products.item(masp, "values")[1]
                load_recipe_for_product(masp, tensp)
                entry_qty_var.set("")
                cb_ingredients_var.set("")
                entry_search_nl_var.set("")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ {action} nguy√™n li·ªáu: {e}", parent=parent_frame)

    def remove_ingredient_from_recipe():
        selected_product = tree_products.selection()
        selected_ingredient = tree_recipe.selection()
        if not selected_product:
            messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn m·ªôt S·∫¢N PH·∫®M ·ªü c√¢y b√™n tr√°i.", parent=parent_frame)
            return
        if not selected_ingredient:
            messagebox.showwarning("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn m·ªôt NGUY√äN LI·ªÜU ·ªü c√¢y b√™n ph·∫£i ƒë·ªÉ x√≥a.", parent=parent_frame)
            return
        masp = selected_product[0]
        manl = selected_ingredient[0]
        tennl = tree_recipe.item(manl, "values")[1]
        
        # S·ª¨A 8: Th√™m parent=parent_frame
        if messagebox.askyesno("X√°c nh·∫≠n x√≥a", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a '{tennl}' kh·ªèi c√¥ng th·ª©c n√†y?", parent=parent_frame):
            query = "DELETE FROM CongThuc WHERE MaSP = ? AND MaNL = ?"
            if db.execute_query(query, (masp, manl)):
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a nguy√™n li·ªáu kh·ªèi c√¥ng th·ª©c.", parent=parent_frame)
                tensp = tree_products.item(masp, "values")[1]
                load_recipe_for_product(masp, tensp)

    # T·∫£i danh s√°ch s·∫£n ph·∫©m (c√¢y b√™n tr√°i) khi m·ªü
    load_all_products()
    
    # S·ª¨A 9: Tr·∫£ v·ªÅ frame ch√≠nh
    return module_frame