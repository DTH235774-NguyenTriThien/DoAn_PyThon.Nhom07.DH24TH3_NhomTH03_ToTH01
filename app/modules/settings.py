# app/modules/settings.py
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import bcrypt 
import configparser 
import os 

# Import c√°c helper chu·∫©n c·ªßa d·ª± √°n
from app import db
from app.db import fetch_query, execute_query, execute_scalar
from app.theme import setup_styles
from app.utils.utils import create_form_window
from app.utils.business_helpers import safe_delete
from app.utils.treeview_helpers import fill_treeview_chunked

CONFIG_FILE = 'config.ini'

# --- H√ÄM CH√çNH HI·ªÇN TH·ªä MODULE ---
def create_settings_module(parent_frame, on_back_callback):
    """Giao di·ªán ch√≠nh cho Module C·∫•u h√¨nh & Qu·∫£n l√Ω T√†i kho·∫£n"""
    
    setup_styles()

    # --- Frame ch√≠nh c·ªßa module ---
    module_frame = tk.Frame(parent_frame, bg="#f5e6ca")

    # --- Header ---
    header = tk.Frame(module_frame, bg="#4b2e05", height=70)
    header.pack(fill="x")
    tk.Label(header, text="üîß C·∫§U H√åNH H·ªÜ TH·ªêNG & T√ÄI KHO·∫¢N", bg="#4b2e05", fg="white",
             font=("Segoe UI", 16, "bold")).pack(pady=12)

    # --- Thanh ƒëi·ªÅu khi·ªÉn (ch·ªâ ch·ª©a n√∫t Quay l·∫°i) ---
    top_frame = tk.Frame(module_frame, bg="#f9fafb")
    top_frame.pack(fill="x", pady=10, padx=10) 
    ttk.Button(top_frame, text="‚¨Ö Quay l·∫°i", style="Close.TButton",
             command=on_back_callback).pack(side="right", padx=5)
    
    # S·ª¨A 1: Kh·ªüi t·∫°o status_label_var ·ªü c·∫•p cao nh·∫•t
    status_label_var = tk.StringVar(value="")
    
    # Nh√£n tr·∫°ng th√°i (s·∫Ω ƒë∆∞·ª£c Tab 1 s·ª≠ d·ª•ng)
    status_label = ttk.Label(top_frame, textvariable=status_label_var, 
                             font=("Arial", 10, "italic"), background="#f9fafb", 
                             foreground="blue")
    status_label.pack(side="left", padx=10)


    # --- T·∫†O NOTEBOOK (Tabs) ---
    notebook = ttk.Notebook(module_frame)
    notebook.pack(fill="both", expand=True, padx=10, pady=(0, 10))

    tab1_accounts = ttk.Frame(notebook, style="TFrame")
    tab2_config = ttk.Frame(notebook, style="TFrame")
    
    notebook.add(tab1_accounts, text="  Qu·∫£n l√Ω T√†i kho·∫£n  ")
    notebook.add(tab2_config, text="  C·∫•u h√¨nh Nghi·ªáp v·ª•  ")

    # S·ª¨A 2: Truy·ªÅn status_label_var v√†o c·∫£ hai h√†m build tab
    
    # =========================================================
    # TAB 1: QU·∫¢N L√ù T√ÄI KHO·∫¢N
    # =========================================================
    build_account_tab(tab1_accounts, status_label_var)

    # =========================================================
    # TAB 2: C·∫§U H√åNH NGHI·ªÜP V·ª§
    # =========================================================
    build_config_tab(tab2_config, status_label_var) # Truy·ªÅn v√†o ƒë√¢y

    # Tr·∫£ v·ªÅ frame ch√≠nh
    return module_frame

# ==============================================================
#  BUILD TAB 1: QU·∫¢N L√ù T√ÄI KHO·∫¢N
# ==============================================================
# S·ª¨A 3: Ch·∫•p nh·∫≠n status_label_var
def build_account_tab(parent, status_label_var):
    """X√¢y d·ª±ng giao di·ªán cho tab Qu·∫£n l√Ω T√†i kho·∫£n"""
    
    # --- Thanh ƒëi·ªÅu khi·ªÉn (Control Frame) ---
    top_frame = tk.Frame(parent, bg="#f9fafb")
    top_frame.pack(fill="x", pady=10, padx=10) 

    # --- Frame N√∫t (B√™n ph·∫£i) ---
    btn_frame = tk.Frame(top_frame, bg="#f9fafb")
    btn_frame.pack(side="right", anchor="center", padx=(10, 0))
    
    ttk.Button(btn_frame, text="üîÑ T·∫£i l·∫°i", style="Close.TButton",
             command=lambda: refresh_data()).pack(side="left", padx=5)
    ttk.Button(btn_frame, text="‚ûï Th√™m T√†i kho·∫£n", style="Add.TButton",
             command=lambda: add_account(refresh_data)).pack(side="left", padx=5)
    ttk.Button(btn_frame, text="üîë Reset M·∫≠t kh·∫©u", style="Edit.TButton",
             command=lambda: reset_password(tree, refresh_data)).pack(side="left", padx=5)
    ttk.Button(btn_frame, text="üóë X√≥a T√†i kho·∫£n", style="Delete.TButton",
             command=lambda: delete_account(tree, refresh_data)).pack(side="left", padx=5)

    # --- Frame L·ªçc (B√™n tr√°i) ---
    filter_frame = tk.Frame(top_frame, bg="#f9fafb")
    filter_frame.pack(side="left", fill="x", expand=True)
    
    tk.Label(filter_frame, text="üîé T√¨m T√™n ƒêN:", font=("Arial", 11),
           bg="#f9fafb").pack(side="left", padx=(5, 2))
    search_var = tk.StringVar()
    entry_search = ttk.Entry(filter_frame, textvariable=search_var, width=30) 
    entry_search.pack(side="left", padx=5, fill="x", expand=True) 
    
    # S·ª¨A 4: X√≥a d√≤ng kh·ªüi t·∫°o status_label_var (v√¨ n√≥ ƒë√£ ƒë∆∞·ª£c truy·ªÅn v√†o)
    # status_label_var = tk.StringVar(value="")
    
    # (Nh√£n status_label ƒë√£ ƒë∆∞·ª£c chuy·ªÉn l√™n h√†m create_settings_module)
    # status_label = ttk.Label(filter_frame, ...)
    # status_label.pack(side="left", padx=10)

    # ===== TREEVIEW (Danh s√°ch t√†i kho·∫£n) =====
    tree_frame = tk.Frame(parent) 
    tree_frame.pack(fill="both", expand=True, padx=10, pady=10)
    
    columns = ("TenDangNhap", "MaNV", "HoTen", "Role")
    headers = {
        "TenDangNhap": "T√™n ƒêƒÉng nh·∫≠p", "MaNV": "M√£ NV",
        "HoTen": "T√™n Nh√¢n vi√™n", "Role": "Vai tr√≤ (Role)"
    }
    tree = ttk.Treeview(tree_frame, columns=columns, show="headings", height=15)
    for col, text in headers.items():
        tree.heading(col, text=text)
        tree.column(col, anchor="center", width=150)
    tree.column("MaNV", anchor="center", width=100) 
    tree.column("Role", anchor="center", width=120) 
    tree.pack(fill="both", expand=True)

    # ===== H√ÄM T·∫¢I D·ªÆ LI·ªÜU =====
    def load_data(tree_widget, status_var, keyword=None):
        status_var.set("ƒêang t·∫£i danh s√°ch t√†i kho·∫£n...")
        tree_widget.update_idletasks() 
        query = """
            SELECT tk.TenDangNhap, tk.MaNV, nv.HoTen, tk.Role 
            FROM TaiKhoan tk
            LEFT JOIN NhanVien nv ON tk.MaNV = nv.MaNV
        """
        params = ()
        if keyword:
            kw = f"%{keyword.strip()}%"
            query += " WHERE tk.TenDangNhap LIKE ? OR nv.HoTen LIKE ? OR tk.Role LIKE ?"
            params = (kw, kw, kw)
        query += " ORDER BY tk.Role, tk.TenDangNhap"
        
        try:
            rows = db.fetch_query(query, params)
            tree_data = []
            for r in rows:
                values_tuple = (
                    r['TenDangNhap'], 
                    r['MaNV'] or "N/A", 
                    r['HoTen'] or "N/A", 
                    r['Role']
                )
                tree_data.append({"iid": r['TenDangNhap'], "values": values_tuple})
            
            fill_treeview_chunked(
                tree_widget, 
                tree_data, 
                on_complete=lambda: status_var.set(f"ƒê√£ t·∫£i {len(rows)} t√†i kho·∫£n.")
            )
        except Exception as e:
            status_var.set("L·ªói t·∫£i t√†i kho·∫£n!")
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t√†i kho·∫£n: {e}")

    # ===== H√ÄM TI·ªÜN √çCH =====
    def refresh_data():
        keyword = search_var.get().strip()
        load_data(tree, status_label_var, keyword)
    
    search_var.trace_add("write", lambda *args: refresh_data())
    refresh_data() # T·∫£i l·∫ßn ƒë·∫ßu

# ==============================================================
#  BUILD TAB 2: C·∫§U H√åNH NGHI·ªÜP V·ª§
# ==============================================================
# S·ª¨A 5: Ch·∫•p nh·∫≠n status_label_var
def build_config_tab(parent, status_label_var):
    """X√¢y d·ª±ng giao di·ªán cho tab C·∫•u h√¨nh Nghi·ªáp v·ª•"""
    
    config_group = ttk.LabelFrame(parent, text="  C·∫•u h√¨nh T√≠ch ƒëi·ªÉm Kh√°ch h√†ng  ", padding=(20, 10))
    config_group.pack(fill="x", expand=False, padx=20, pady=20)

    config_group.grid_columnconfigure(1, weight=1)

    ttk.Label(config_group, text="S·ªë ti·ªÅn (VNƒê) ƒë·ªÉ ƒë∆∞·ª£c 1 ƒëi·ªÉm:", font=("Arial", 11))\
        .grid(row=0, column=0, padx=5, pady=10, sticky="w")
    
    vnd_per_point_var = tk.StringVar()
    entry_points = ttk.Entry(config_group, textvariable=vnd_per_point_var, font=("Arial", 11), width=20)
    entry_points.grid(row=0, column=1, padx=5, pady=10, sticky="w")

    btn_bar = tk.Frame(parent) 
    btn_bar.pack(fill="x", padx=20, pady=10)

    ttk.Button(btn_bar, text="üíæ L∆∞u C·∫•u h√¨nh", style="Add.TButton",
             command=lambda: save_config()).pack(side="left", padx=5)
    ttk.Button(btn_bar, text="üîÑ T·∫£i l·∫°i C·∫•u h√¨nh", style="Close.TButton",
             command=lambda: load_config()).pack(side="left", padx=5)

    def load_config():
        """ƒê·ªçc t·ª´ config.ini v√† ƒëi·ªÅn v√†o form"""
        config = configparser.ConfigParser()
        if not os.path.exists(CONFIG_FILE):
             vnd_per_point_var.set("10000") 
             return 

        config.read(CONFIG_FILE, encoding='utf-8')
        vnd_value = config.get('BusinessLogic', 'VND_PER_POINT', fallback='10000')
        vnd_per_point_var.set(vnd_value)
        
        # S·ª¨A 6: H√†m n√†y gi·ªù ƒë√£ c√≥ th·ªÉ truy c·∫≠p status_label_var
        status_label_var.set("ƒê√£ t·∫£i c·∫•u h√¨nh.") 

    def save_config():
        """L·∫•y gi√° tr·ªã t·ª´ form v√† ghi ƒë√® v√†o config.ini"""
        config = configparser.ConfigParser()
        
        if os.path.exists(CONFIG_FILE):
            config.read(CONFIG_FILE, encoding='utf-8')

        try:
            vnd_value = int(vnd_per_point_var.get())
            if vnd_value <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("L·ªói", "S·ªë ti·ªÅn ph·∫£i l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng.", parent=parent)
            return

        if not config.has_section('BusinessLogic'):
            config.add_section('BusinessLogic')
            
        config.set('BusinessLogic', 'VND_PER_POINT', str(vnd_value))
        
        try:
            with open(CONFIG_FILE, 'w', encoding='utf-8') as configfile:
                config.write(configfile)
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ l∆∞u c·∫•u h√¨nh th√†nh c√¥ng.", parent=parent)
            # S·ª¨A 6: H√†m n√†y gi·ªù ƒë√£ c√≥ th·ªÉ truy c·∫≠p status_label_var
            status_label_var.set("ƒê√£ l∆∞u c·∫•u h√¨nh.")
        except Exception as e:
            messagebox.showerror("L·ªói L∆∞u file", f"Kh√¥ng th·ªÉ ghi file config.ini:\n{e}", parent=parent)

    load_config()


# ==============================================================
#  H√ÄM CRUD T√ÄI KHO·∫¢N (Gi·ªØ nguy√™n)
# ==============================================================

def add_account(refresh_func):
    """M·ªü c·ª≠a s·ªï Toplevel ƒë·ªÉ th√™m t√†i kho·∫£n m·ªõi"""
    win, form = create_form_window("‚ûï Th√™m T√†i kho·∫£n M·ªõi", "450x300")
    entries = {}

    try:
        nv_rows = db.fetch_query("""
            SELECT MaNV, HoTen FROM NhanVien 
            WHERE MaNV NOT IN (SELECT MaNV FROM TaiKhoan WHERE MaNV IS NOT NULL)
            AND TrangThai = N'ƒêang l√†m'
        """)
        nv_map = {f"{r['MaNV'].strip()} - {r['HoTen']}": r['MaNV'].strip() for r in nv_rows}
        nv_list = [""] 
        nv_list.extend(list(nv_map.keys()))
    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n: {e}", parent=win)
        nv_list = [""]
        nv_map = {}

    role_list = ["Admin", "Nh√¢n vi√™n", "Pha ch·∫ø", "Thu ng√¢n"] 

    labels = ["T√™n ƒêƒÉng nh·∫≠p", "M·∫≠t kh·∫©u", "Li√™n k·∫øt v·ªõi NV", "Vai tr√≤ (Role)"]
    for i, text in enumerate(labels):
        ttk.Label(form, text=text, font=("Arial", 11), background="#f8f9fa")\
            .grid(row=i, column=0, sticky="w", padx=8, pady=8)

        if text == "M·∫≠t kh·∫©u":
            ent = ttk.Entry(form, font=("Arial", 11), show="*")
        elif text == "Li√™n k·∫øt v·ªõi NV":
            ent = ttk.Combobox(form, values=nv_list, state="readonly", font=("Arial", 11))
        elif text == "Vai tr√≤ (Role)":
            ent = ttk.Combobox(form, values=role_list, state="readonly", font=("Arial", 11))
            ent.set(role_list[1]) 
        else:
            ent = ttk.Entry(form, font=("Arial", 11))
        
        ent.grid(row=i, column=1, padx=8, pady=8, sticky="ew")
        entries[text] = ent

    form.grid_columnconfigure(1, weight=1)

    def submit():
        try:
            username = entries["T√™n ƒêƒÉng nh·∫≠p"].get().strip()
            password = entries["M·∫≠t kh·∫©u"].get().strip()
            nv_display = entries["Li√™n k·∫øt v·ªõi NV"].get()
            role = entries["Vai tr√≤ (Role)"].get()
            
            manv = nv_map.get(nv_display) 

            if not username or not password or not role:
                messagebox.showwarning("Thi·∫øu th√¥ng tin", "T√™n ƒëƒÉng nh·∫≠p, M·∫≠t kh·∫©u v√† Vai tr√≤ l√† b·∫Øt bu·ªôc.", parent=win)
                return

            if db.execute_scalar("SELECT COUNT(*) FROM TaiKhoan WHERE TenDangNhap = ?", (username,)):
                messagebox.showwarning("Tr√πng l·∫∑p", f"T√™n ƒëƒÉng nh·∫≠p '{username}' ƒë√£ t·ªìn t·∫°i.", parent=win)
                return

            pw_bytes = password.encode('utf-8')
            salt = bcrypt.gensalt()
            hash_bytes = bcrypt.hashpw(pw_bytes, salt)
            hash_str = hash_bytes.decode('utf-8') 

            query = """
                INSERT INTO TaiKhoan (TenDangNhap, MatKhauHash, MaNV, Role)
                VALUES (?, ?, ?, ?)
            """
            params = (username, hash_str, manv, role)
            
            if db.execute_query(query, params):
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t·∫°o t√†i kho·∫£n '{username}' th√†nh c√¥ng.", parent=win)
                refresh_func()
                win.destroy()

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n: {e}", parent=win)

    btn_frame = tk.Frame(win, bg="#f8f9fa")
    btn_frame.pack(pady=10)
    ttk.Button(btn_frame, text="üíæ L∆∞u T√†i kho·∫£n", style="Add.TButton",
             command=submit).pack(ipadx=10, ipady=6)


def reset_password(tree, refresh_func):
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("‚ö†Ô∏è Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn m·ªôt t√†i kho·∫£n ƒë·ªÉ reset m·∫≠t kh·∫©u!")
        return
    
    username = selected[0] 
    
    new_pass = simpledialog.askstring(
        "Reset M·∫≠t kh·∫©u", 
        f"Nh·∫≠p m·∫≠t kh·∫©u M·ªöI cho t√†i kho·∫£n:\n{username}",
        parent=tree.master,
        show='*'
    )

    if not new_pass:
        return 

    try:
        pw_bytes = new_pass.encode('utf-8')
        salt = bcrypt.gensalt()
        hash_bytes = bcrypt.hashpw(pw_bytes, salt)
        hash_str = hash_bytes.decode('utf-8') 

        query = "UPDATE TaiKhoan SET MatKhauHash = ? WHERE TenDangNhap = ?"
        if db.execute_query(query, (hash_str, username)):
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u cho '{username}'.")
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u (l·ªói SQL).")

    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ hash ho·∫∑c l∆∞u m·∫≠t kh·∫©u: {e}")


def delete_account(tree, refresh_func):
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("‚ö†Ô∏è Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn t√†i kho·∫£n c·∫ßn x√≥a!")
        return
    
    username = selected[0] 
    
    if username.lower() == 'admin':
        messagebox.showerror("Kh√¥ng th·ªÉ x√≥a", "Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n 'admin' g·ªëc.")
        return

    safe_delete(
        table_name="TaiKhoan",
        key_column="TenDangNhap",
        key_value=username,
        cursor=db.cursor,
        conn=db.conn,
        refresh_func=refresh_func,
        item_label="t√†i kho·∫£n"
    )