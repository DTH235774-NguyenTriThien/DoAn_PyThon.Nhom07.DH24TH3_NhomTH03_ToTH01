# app/ui/login_frame.py
import tkinter as tk
from tkinter import messagebox
import configparser
import os
import bcrypt 

# Import c√°c helper chu·∫©n
from app.utils.utils import clear_window, center_window 
from app.db import fetch_query 

def show_login(root, on_exit_callback=None):
    """Hi·ªÉn th·ªã giao di·ªán ƒëƒÉng nh·∫≠p (ƒë√£ n√¢ng c·∫•p l√™n Bcrypt)"""
    clear_window(root)
    root.title("ƒêƒÉng nh·∫≠p h·ªá th·ªëng qu·∫£n l√Ω qu√°n c√† ph√™")
    root.configure(bg="#d7ccc8") 

    window_width = 550
    window_height = 450
    center_window(root, window_width, window_height) 
    root.minsize(150, 200)

    # (Code UI Card... gi·ªØ nguy√™n)
    frame = tk.Frame(root, bg="#fff8e1", bd=2, relief="groove", highlightbackground="#a1887f", highlightthickness=1)
    frame.place(relx=0.5, rely=0.5, anchor="center", width=420, height=360)
    tk.Label(frame, text="‚òï ƒêƒÇNG NH·∫¨P H·ªÜ TH·ªêNG ‚òï", font=("Segoe UI", 16, "bold"), bg="#fff8e1", fg="#4e342e").pack(pady=18)
    form = tk.Frame(frame, bg="#fff8e1")
    form.pack(padx=30, pady=5, fill="x")
    form.grid_columnconfigure(1, weight=1)
    tk.Label(form, text="T√™n ƒëƒÉng nh·∫≠p", font=("Segoe UI", 11), bg="#fff8e1", fg="#4e342e").grid(row=0, column=0, sticky="w", pady=8)
    entry_user = tk.Entry(form, width=28, font=("Segoe UI", 11), bd=1, relief="solid")
    entry_user.grid(row=0, column=1, padx=10, pady=8)
    tk.Label(form, text="M·∫≠t kh·∫©u", font=("Segoe UI", 11), bg="#fff8e1", fg="#4e342e").grid(row=1, column=0, sticky="w", pady=8)
    pw_frame = tk.Frame(form, bg="#fff8e1")
    pw_frame.grid(row=1, column=1, padx=10, pady=8)
    entry_pass = tk.Entry(pw_frame, width=24, show="*", font=("Segoe UI", 11), bd=1, relief="solid")
    entry_pass.pack(side="left", fill="x", expand=True)
    def toggle_pw():
        if entry_pass.cget("show") == "":
            entry_pass.config(show="*"); btn_toggle.config(text="üëÅ")
        else:
            entry_pass.config(show=""); btn_toggle.config(text="üôà")
    btn_toggle = tk.Button(form, text="üëÅ", bg="#fff8e1", bd=0, relief="flat", cursor="hand2", font=("Segoe UI", 10), command=toggle_pw)
    btn_toggle.grid(row=1, column=2, padx=(6, 0), pady=(6, 6))
    remembered_user = ""
    if os.path.exists("remember.ini"):
        rcfg = configparser.ConfigParser()
        rcfg.read("remember.ini", encoding="utf-8")
        remembered_user = rcfg.get("remember", "username", fallback="")
    entry_user.delete(0, tk.END)
    if remembered_user:
        entry_user.insert(0, remembered_user)
    remember_var = tk.BooleanVar(value=bool(remembered_user))
    chk = tk.Checkbutton(frame, text="Ghi nh·ªõ ƒëƒÉng nh·∫≠p", bg="#fff8e1", variable=remember_var, font=("Segoe UI", 10))
    chk.pack(anchor="w", padx=36, pady=(6, 8))
    btn_frame = tk.Frame(frame, bg="#fff8e1")
    btn_frame.pack(pady=12)

    # =========================================================
    # S·ª¨A L·ªñI H√ÄM CHECK_LOGIN
    # =========================================================
    def check_login():
        user = entry_user.get().strip()
        pw_plain = entry_pass.get().strip()
        
        if not user or not pw_plain:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u!")
            return
        
        query = """
            SELECT tk.TenDangNhap, tk.MatKhauHash, nv.HoTen, tk.Role, tk.MaNV
            FROM TaiKhoan tk
            LEFT JOIN NhanVien nv ON tk.MaNV = nv.MaNV
            WHERE tk.TenDangNhap = ? AND (nv.MaNV IS NULL OR nv.TrangThai != N'ƒê√£ ngh·ªâ')
        """
        results = fetch_query(query, (user,))

        if results:
            user_data = results[0]
            hash_from_db_str = user_data.get("MatKhauHash") # D√πng .get()

            # S·ª¨A L·ªñI: Di chuy·ªÉn c√°c khai b√°o bi·∫øn ra B√äN NGO√ÄI kh·ªëi 'try'
            # (D√πng .get() ƒë·ªÉ tr√°nh l·ªói n·∫øu c·ªôt b·ªã NULL)
            username_login = user_data.get("TenDangNhap", user) 
            hoten = user_data.get("HoTen")
            role = user_data.get("Role", "Unknown")
            employee_id = user_data.get("MaNV") # (v√≠ d·ª•: 'NV001' ho·∫∑c 'NULL')
            display_name = hoten or username_login
            # =========================================================

            if not hash_from_db_str:
                 messagebox.showerror("L·ªói Hash", f"T√†i kho·∫£n [{username_login}] kh√¥ng c√≥ m·∫≠t kh·∫©u (hash b·ªã NULL).")
                 return

            try:
                pw_plain_bytes = pw_plain.encode('utf-8')
                hash_from_db_bytes = hash_from_db_str.encode('utf-8')

                if bcrypt.checkpw(pw_plain_bytes, hash_from_db_bytes):
                    
                    # (C√°c bi·∫øn ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ·ªü tr√™n)

                    if remember_var.get():
                        rc = configparser.ConfigParser()
                        rc["remember"] = {"username": user}
                        with open("remember.ini", "w", encoding="utf-8") as f:
                            rc.write(f)
                    else:
                        if os.path.exists("remember.ini"):
                            os.remove("remember.ini")
                    
                    messagebox.showinfo("ƒêƒÉng nh·∫≠p", f"Xin ch√†o {display_name}!\nVai tr√≤: {role}")
                    
                    from app.ui.mainmenu_frame import show_main_menu
                    # Truy·ªÅn callback v√† employee_id (MaNV)
                    show_main_menu(root, display_name, role, on_exit_callback, employee_id=employee_id)
                else:
                    entry_pass.focus_set()
                    messagebox.showerror("Sai th√¥ng tin", "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")
            
            except Exception as e:
                # S·ª¨A L·ªñI: B√¢y gi·ªù 'username_login' ƒë√£ t·ªìn t·∫°i 
                # v√† c√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói ch√≠nh x√°c.
                messagebox.showerror("L·ªói Hash", f"L·ªói ƒë·ªãnh d·∫°ng m·∫≠t kh·∫©u cho [{username_login}]. Vui l√≤ng ch·∫°y script ƒë·ªìng b·ªô.\n{e}")
        else:
            messagebox.showerror("Sai th√¥ng tin", "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")
            
    # S·ª¨A 3: H√†m tho√°t (S·ª≠ d·ª•ng callback n·∫øu c√≥)
    def exit_app():
        if on_exit_callback:
            on_exit_callback() # G·ªçi h√†m shutdown t·ª´ main.py
        else:
            root.destroy() # Fallback

    btn_login = tk.Button(btn_frame, text="ƒêƒÉng nh·∫≠p", bg="#6d4c41", fg="white",
                          font=("Segoe UI", 11, "bold"), width=14, command=check_login, cursor="hand2")
    btn_login.grid(row=0, column=0, padx=8)
    
    # S·ª¨A 4: G√°n command cho n√∫t Tho√°t
    btn_exit = tk.Button(btn_frame, text="Tho√°t", bg="#8d6e63", fg="white",
                         font=("Segoe UI", 11), width=14, command=exit_app, cursor="hand2")
    btn_exit.grid(row=0, column=1, padx=8)

    entry_user.bind("<Return>", lambda e: entry_pass.focus_set())
    entry_pass.bind("<Return>", lambda e: check_login())