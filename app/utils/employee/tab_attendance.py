# app/utils/employee/tab_attendance.py
import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import DateEntry
from app import db
from app.theme import setup_styles
from datetime import datetime

# S·ª¨A 1: Imports
from app.db import fetch_query, execute_query
from app.utils.utils import go_back
from app.utils.business_helpers import safe_delete
from app.utils.time_helpers import (
    format_for_display, parse_date, parse_time, 
    combine_date_time, normalize_date_input
)
from app.utils.id_helpers import generate_next_macc
from app.utils.treeview_helpers import fill_treeview_chunked

def build_tab(parent, root=None, username=None, role=None):
    """Tab Ch·∫•m c√¥ng ‚Äî ƒê·ªìng b·ªô layout gi·ªëng tab_shift"""
    setup_styles()
    parent.configure(bg="#f5e6ca")

    # ===== THANH C√îNG C·ª§ (TOP FRAME) =====
    top_frame = tk.Frame(parent, bg="#f9fafb")
    top_frame.pack(fill="x", pady=10, padx=10) 

    # --- Frame N√öT CH·ª®C NƒÇNG (B√™n ph·∫£i) ---
    # (T·∫•t c·∫£ c√°c n√∫t ƒë·ªÅu n·∫±m b√™n ph·∫£i, gi·ªëng tab_shift)
    btn_frame = tk.Frame(top_frame, bg="#f9fafb")
    btn_frame.pack(side="right", anchor="n", padx=(10, 0)) # N·∫±m b√™n ph·∫£i
    
    ttk.Button(btn_frame, text="üîÑ T·∫£i l·∫°i", style="Close.TButton",
               command=lambda: refresh_data()).pack(side="left", padx=5)
    ttk.Button(btn_frame, text="‚ûï Ch·∫•m c√¥ng", style="Add.TButton",
               command=lambda: add_attendance(refresh_data, cal_filter.get_date())).pack(side="left", padx=5)
    ttk.Button(btn_frame, text="‚úèÔ∏è S·ª≠a", style="Edit.TButton",
               command=lambda: edit_attendance(tree, refresh_data)).pack(side="left", padx=5)
    ttk.Button(btn_frame, text="üóë X√≥a", style="Delete.TButton",
               command=lambda: delete_attendance(tree, refresh_data)).pack(side="left", padx=5)
    ttk.Button(btn_frame, text="‚¨Ö Quay l·∫°i", style="Close.TButton",
               command=lambda: go_back(root, username, role)).pack(side="left", padx=5)

    # --- Frame L·ªåC (B√™n tr√°i, t·ª± m·ªü r·ªông) ---
    filter_frame = tk.Frame(top_frame, bg="#f9fafb")
    filter_frame.pack(side="left", fill="x", expand=True) # T·ª± l·∫•p ƒë·∫ßy

    tk.Label(filter_frame, text="üìÖ L·ªçc theo ng√†y:", font=("Arial", 11),
             bg="#f9fafb").pack(side="left", padx=(5, 2))
    cal_filter = DateEntry(filter_frame, date_pattern="dd/mm/yyyy", font=("Arial", 11),
                           background="#3e2723", foreground="white", borderwidth=2,
                           width=12) 
    cal_filter.pack(side="left", padx=5)
    cal_filter.set_date(datetime.now()) 

    tk.Label(filter_frame, text="üîé T√¨m nh√¢n vi√™n:", font=("Arial", 11),
             bg="#f9fafb").pack(side="left", padx=(10, 2))
    entry_search = ttk.Entry(filter_frame, width=30) 
    entry_search.pack(side="left", padx=5, fill="x", expand=True) 

    # Label tr·∫°ng th√°i
    status_label_var = tk.StringVar(value="")
    status_label = ttk.Label(filter_frame, textvariable=status_label_var, font=("Arial", 10, "italic"), background="#f9fafb", foreground="blue")
    status_label.pack(side="left", padx=10)


    # ===== TREEVIEW =====
    columns = ["MaCham", "MaNV", "HoTen", "NgayLam", "TenCa", "ClockIn", "ClockOut", "GhiChu"]
    headers = {
        "MaCham": "M√£ Ch·∫•m",
        "MaNV": "M√£ NV",
        "HoTen": "H·ªç T√™n",
        "NgayLam": "Ng√†y L√†m",
        "TenCa": "Ca L√†m",
        "ClockIn": "Gi·ªù V√†o",
        "ClockOut": "Gi·ªù Ra",
        "GhiChu": "Ghi Ch√∫"
    }

    tree = ttk.Treeview(parent, columns=columns, show="headings", height=15)
    for col, text in headers.items():
        tree.heading(col, text=text)
        tree.column(col, anchor="center", width=120)
    
    # ƒêi·ªÅu ch·ªânh c·ªôt
    tree.column("MaCham", width=80)
    tree.column("MaNV", width=80)
    tree.column("HoTen", width=150)
    tree.column("TenCa", width=100)
    tree.column("ClockIn", width=80)
    tree.column("ClockOut", width=80)
    tree.column("GhiChu", width=200, anchor="center") 
    tree.pack(fill="both", expand=True, padx=10, pady=10)

    # (H√†m load_data gi·ªØ nguy√™n nh∆∞ c≈©)
    def load_data(tree_widget, status_var, filter_date, filter_keyword):
        status_var.set("ƒêang t·∫£i d·ªØ li·ªáu...")
        tree_widget.update_idletasks() 

        query = """
            SELECT 
                cc.MaCham, cc.MaNV, nv.HoTen, cc.NgayLam, 
                cl.TenCa, cc.ClockIn, cc.ClockOut, cc.GhiChu
            FROM ChamCong cc
            LEFT JOIN NhanVien nv ON cc.MaNV = nv.MaNV
            LEFT JOIN CaLam cl ON cc.MaCa = cl.MaCa
            WHERE 1=1
        """
        params = []
        try:
            date_obj = cal_filter.get_date()
            query += " AND cc.NgayLam = ? "
            params.append(date_obj)
        except Exception:
            pass 
        if filter_keyword:
            kw = f"%{filter_keyword.strip()}%"
            query += " AND (cc.MaNV LIKE ? OR nv.HoTen LIKE ?) "
            params.extend([kw, kw])
        query += " ORDER BY cc.NgayLam DESC, cc.ClockIn DESC"

        try:
            rows = db.fetch_query(query, tuple(params))
            tree_data = []
            for row in rows:
                macham = row["MaCham"]
                manv = row["MaNV"]
                hoten = row["HoTen"] or ""
                ngaylam_obj = row["NgayLam"]
                ngaylam = ngaylam_obj.strftime("%d/%m/%Y") if ngaylam_obj else ""
                tenca = row["TenCa"] or "N/A"
                clockin_obj = row["ClockIn"]
                clockin = clockin_obj.strftime("%H:%M") if clockin_obj else "--:--"
                clockout_obj = row["ClockOut"]
                clockout = clockout_obj.strftime("%H:%M") if clockout_obj else "--:--"
                ghichu = row["GhiChu"] or ""
                values_tuple = (macham, manv, hoten, ngaylam, tenca, clockin, clockout, ghichu)
                tree_data.append({"iid": macham, "values": values_tuple})

            def on_load_complete():
                status_var.set(f"ƒê√£ t·∫£i {len(rows)} b·∫£n ghi.")
                
            fill_treeview_chunked(
                tree=tree_widget, 
                rows=tree_data, 
                batch=100,
                on_complete=on_load_complete
            )
        except Exception as e:
            status_var.set("L·ªói t·∫£i d·ªØ li·ªáu!")
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ch·∫•m c√¥ng: {e}")

    # ===== C√ÅC N√öT CH·ª®C NƒÇNG (C·∫≠p nh·∫≠t command) =====
    def refresh_data():
        filter_date = cal_filter.get()
        filter_keyword = entry_search.get().strip()
        load_data(tree, status_label_var, filter_date, filter_keyword)

    # ===== S·ª∞ KI·ªÜN T√åM KI·∫æM REALTIME (C·∫≠p nh·∫≠t command) =====
    cal_filter.bind("<<DateEntrySelected>>", lambda e: refresh_data())
    entry_search.bind("<KeyRelease>", lambda e: refresh_data())

    # ===== DOUBLE CLICK TO EDIT (C·∫≠p nh·∫≠t command) =====
    def on_double_click(_):
        sel = tree.selection()
        if sel:
            edit_attendance(tree, refresh_data)
    tree.bind("<Double-1>", on_double_click)
    
    # T·∫£i l·∫ßn ƒë·∫ßu
    refresh_data()

# ==============================================================
#  H√ÄM CRUD
# ==============================================================

# Bi·∫øn cache cho ComboBox Nh√¢n vi√™n v√† Ca l√†m
_employee_list = None
_shift_list = None

def fetch_combobox_data():
    """T·∫£i v√† cache danh s√°ch NV, Ca l√†m ƒë·ªÉ d√πng trong form Add/Edit"""
    global _employee_list, _shift_list
    if _employee_list is None:
        # L·∫•y NV (M√£ - T√™n)
        rows = db.fetch_query("SELECT MaNV, HoTen FROM NhanVien WHERE TrangThai = N'ƒêang l√†m' ORDER BY HoTen")
        _employee_list = [f"{r['MaNV']} - {r['HoTen']}" for r in rows]
    
    if _shift_list is None:
        # L·∫•y Ca (M√£ - T√™n - Gi·ªù)
        rows = db.fetch_query("SELECT MaCa, TenCa, GioBatDau, GioKetThuc FROM CaLam ORDER BY GioBatDau")
        _shift_list = [f"{r['MaCa']} - {r['TenCa']} ({r['GioBatDau'].strftime('%H:%M')} - {r['GioKetThuc'].strftime('%H:%M')})" for r in rows if r['GioBatDau'] and r['GioKetThuc']]


def add_attendance(refresh, default_date=None):
    """Th√™m b·∫£n ghi ch·∫•m c√¥ng m·ªõi"""
    fetch_combobox_data() # ƒê·∫£m b·∫£o c√≥ d·ªØ li·ªáu cho ComboBox

    win = tk.Toplevel()
    win.title("‚ûï Th√™m ch·∫•m c√¥ng")
    win.geometry("450x400")
    win.configure(bg="#f8f9fa")

    form = tk.Frame(win, bg="#f8f9fa")
    form.pack(padx=20, pady=15, fill="both", expand=True)

    labels = ["Nh√¢n vi√™n", "Ng√†y l√†m", "Ca l√†m", "Gi·ªù v√†o (HH:MM)", "Gi·ªù ra (HH:MM)", "Ghi ch√∫"]
    entries = {}

    for i, text in enumerate(labels):
        ttk.Label(form, text=text, font=("Arial", 11),
                  background="#f8f9fa").grid(row=i, column=0, sticky="w", padx=8, pady=6)
        
        if text == "Nh√¢n vi√™n":
            cb = ttk.Combobox(form, values=_employee_list, state="readonly", font=("Arial", 11))
            cb.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = cb
        elif text == "Ca l√†m":
            cb = ttk.Combobox(form, values=_shift_list, state="normal", font=("Arial", 11))
            cb.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = cb
        elif text == "Ng√†y l√†m":
            cal = DateEntry(form, date_pattern="dd/mm/yyyy", font=("Arial", 11),
                            background="#3e2723", foreground="white", borderwidth=2)
            if default_date:
                cal.set_date(default_date)
            cal.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = cal
        else:
            entry = ttk.Entry(form, font=("Arial", 11))
            entry.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = entry

    # G·ª£i √Ω gi·ªù v√†o l√† gi·ªù hi·ªán t·∫°i
    entries["Gi·ªù v√†o (HH:MM)"].insert(0, datetime.now().strftime("%H:%M"))

    form.grid_columnconfigure(1, weight=1)
    
    def submit():
        try:
            # 1. L·∫•y v√† chu·∫©n h√≥a d·ªØ li·ªáu
            nv_text = entries["Nh√¢n vi√™n"].get().split(" - ")[0].strip()
            ngay_lam = entries["Ng√†y l√†m"].get_date()
            
            ca_text = entries["Ca l√†m"].get()
            maca = ca_text.split(" - ")[0].strip() if " - " in ca_text else None
            
            gio_vao_str = entries["Gi·ªù v√†o (HH:MM)"].get().strip()
            gio_ra_str = entries["Gi·ªù ra (HH:MM)"].get().strip()
            ghi_chu = entries["Ghi ch√∫"].get().strip()

            if not nv_text or not ngay_lam:
                messagebox.showwarning("Thi·∫øu th√¥ng tin", "Nh√¢n vi√™n v√† Ng√†y l√†m l√† b·∫Øt bu·ªôc.", parent=win)
                return

            # K·∫øt h·ª£p Ng√†y + Gi·ªù
            clock_in_dt = combine_date_time(ngay_lam, gio_vao_str)
            clock_out_dt = combine_date_time(ngay_lam, gio_ra_str)
            
            # N·∫øu nh·∫≠p 'ca' nh∆∞ng kh√¥ng nh·∫≠p gi·ªù, th·ª≠ t·ª± ƒë·ªông l·∫•y gi·ªù
            if maca and (not clock_in_dt or not clock_out_dt):
                pass # (C√≥ th·ªÉ th√™m logic t·ª± l·∫•y gi·ªù ca ·ªü ƒë√¢y n·∫øu mu·ªën)

            # ==================================================
            # TH√äM VALIDATION ƒê·ªÇ S·ª¨A L·ªñI
            # ==================================================
            if clock_in_dt and clock_out_dt and clock_out_dt < clock_in_dt:
                messagebox.showwarning("L·ªói Logic", 
                                      "Gi·ªù ra (ClockOut) kh√¥ng th·ªÉ nh·ªè h∆°n Gi·ªù v√†o (ClockIn) trong c√πng m·ªôt ng√†y.", 
                                      parent=win)
                return
            # ==================================================            

            # 2. L·∫•y MaCham m·ªõi
            macham = generate_next_macc(db.cursor) # D√πng helper sinh m√£

            # 3. L∆∞u (S·ª¨A 3: D√πng execute_query)
            query = """
                INSERT INTO ChamCong (MaCham, MaNV, MaCa, NgayLam, ClockIn, ClockOut, GhiChu)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """
            params = (macham, nv_text, maca, ngay_lam, clock_in_dt, clock_out_dt, ghi_chu)
            
            if db.execute_query(query, params):
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ th√™m b·∫£n ghi ch·∫•m c√¥ng.", parent=win)
                win.destroy()
                refresh()
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m ch·∫•m c√¥ng: {e}", parent=win)

    btn_frame = tk.Frame(win, bg="#f8f9fa")
    btn_frame.pack(pady=10)
    ttk.Button(btn_frame, text="üíæ L∆∞u s·∫£n ph·∫©m", style="Add.TButton",
               command=lambda: submit()).pack(ipadx=10, ipady=6)


def edit_attendance(tree, refresh):
    """S·ª≠a b·∫£n ghi ch·∫•m c√¥ng"""
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("‚ö†Ô∏è Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn b·∫£n ghi c·∫ßn s·ª≠a!")
        return
    
    # S·ª¨A 4: L·∫•y iid (MaCham) tr·ª±c ti·∫øp
    macham = selected[0]
    
    # L·∫•y d·ªØ li·ªáu th√¥ t·ª´ CSDL ƒë·ªÉ s·ª≠a (ch√≠nh x√°c h∆°n l√† t·ª´ TreeView)
    row = db.fetch_query("SELECT * FROM ChamCong WHERE MaCham = ?", (macham,))
    if not row:
        messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y b·∫£n ghi ch·∫•m c√¥ng!")
        return
    
    current = row[0] # fetch_query tr·∫£ v·ªÅ list[dict]
    fetch_combobox_data() # T·∫£i data cho ComboBox

    win = tk.Toplevel()
    win.title(f"‚úèÔ∏è S·ª≠a ch·∫•m c√¥ng {macham}")
    win.geometry("450x400")
    win.configure(bg="#f8f9fa")

    form = tk.Frame(win, bg="#f8f9fa")
    form.pack(padx=20, pady=15, fill="both", expand=True)

    labels = ["Nh√¢n vi√™n", "Ng√†y l√†m", "Ca l√†m", "Gi·ªù v√†o (HH:MM)", "Gi·ªù ra (HH:MM)", "Ghi ch√∫"]
    entries = {}

    for i, text in enumerate(labels):
        ttk.Label(form, text=text, font=("Arial", 11),
                  background="#f8f9fa").grid(row=i, column=0, sticky="w", padx=8, pady=6)
        
        if text == "Nh√¢n vi√™n":
            cb = ttk.Combobox(form, values=_employee_list, state="readonly", font=("Arial", 11))
            # T√¨m gi√° tr·ªã kh·ªõp
            for item in _employee_list:
                if item.startswith(current["MaNV"]):
                    cb.set(item)
                    break
            cb.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = cb
        elif text == "Ca l√†m":
            cb = ttk.Combobox(form, values=_shift_list, state="normal", font=("Arial", 11))
            # T√¨m gi√° tr·ªã kh·ªõp
            if current["MaCa"]:
                for item in _shift_list:
                    if item.startswith(str(current["MaCa"])):
                        cb.set(item)
                        break
            cb.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = cb
        elif text == "Ng√†y l√†m":
            cal = DateEntry(form, date_pattern="dd/mm/yyyy", font=("Arial", 11),
                            background="#3e2723", foreground="white", borderwidth=2)
            cal.set_date(current["NgayLam"])
            cal.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = cal
        else:
            entry = ttk.Entry(form, font=("Arial", 11))
            if text == "Gi·ªù v√†o (HH:MM)" and current["ClockIn"]:
                entry.insert(0, current["ClockIn"].strftime("%H:%M"))
            elif text == "Gi·ªù ra (HH:MM)" and current["ClockOut"]:
                entry.insert(0, current["ClockOut"].strftime("%H:%M"))
            elif text == "Ghi ch√∫":
                entry.insert(0, current["GhiChu"] or "")
            entry.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = entry

    form.grid_columnconfigure(1, weight=1)
    
    def save():
        try:
            # 1. L·∫•y v√† chu·∫©n h√≥a d·ªØ li·ªáu
            nv_text = entries["Nh√¢n vi√™n"].get().split(" - ")[0].strip()
            ngay_lam = entries["Ng√†y l√†m"].get_date()
            
            ca_text = entries["Ca l√†m"].get()
            maca = ca_text.split(" - ")[0].strip() if " - " in ca_text else None
            
            gio_vao_str = entries["Gi·ªù v√†o (HH:MM)"].get().strip()
            gio_ra_str = entries["Gi·ªù ra (HH:MM)"].get().strip()
            ghi_chu = entries["Ghi ch√∫"].get().strip()

            if not nv_text or not ngay_lam:
                messagebox.showwarning("Thi·∫øu th√¥ng tin", "Nh√¢n vi√™n v√† Ng√†y l√†m l√† b·∫Øt bu·ªôc.", parent=win)
                return

            clock_in_dt = combine_date_time(ngay_lam, gio_vao_str)
            clock_out_dt = combine_date_time(ngay_lam, gio_ra_str)

            # ==================================================
            # TH√äM VALIDATION ƒê·ªÇ S·ª¨A L·ªñI
            # ==================================================
            if clock_in_dt and clock_out_dt and clock_out_dt < clock_in_dt:
                messagebox.showwarning("L·ªói Logic", 
                                      "Gi·ªù ra (ClockOut) kh√¥ng th·ªÉ nh·ªè h∆°n Gi·ªù v√†o (ClockIn) trong c√πng m·ªôt ng√†y.", 
                                      parent=win)
                return
            # ==================================================            

            # 2. L∆∞u (S·ª¨A 5: D√πng execute_query)
            query = """
                UPDATE ChamCong 
                SET MaNV=?, MaCa=?, NgayLam=?, ClockIn=?, ClockOut=?, GhiChu=?
                WHERE MaCham=?
            """
            params = (nv_text, maca, ngay_lam, clock_in_dt, clock_out_dt, ghi_chu, macham)
            
            if db.execute_query(query, params):
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t b·∫£n ghi ch·∫•m c√¥ng.", parent=win)
                win.destroy()
                refresh()
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ch·∫•m c√¥ng: {e}", parent=win)

    btn_frame = tk.Frame(win, bg="#f8f9fa")
    btn_frame.pack(pady=10)
    ttk.Button(btn_frame, text="üíæ L∆∞u s·∫£n ph·∫©m", style="Add.TButton",
               command=lambda: save()).pack(ipadx=10, ipady=6)


def delete_attendance(tree, refresh):
    """X√≥a b·∫£n ghi ch·∫•m c√¥ng"""
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("‚ö†Ô∏è Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn b·∫£n ghi c·∫ßn x√≥a!")
        return

    # S·ª¨A 6: L·∫•y iid (macham) tr·ª±c ti·∫øp
    macham = selected[0] 

    safe_delete(
        table_name="ChamCong",
        key_column="MaCham",
        key_value=macham,
        cursor=db.cursor,
        conn=db.conn,
        refresh_func=refresh,
        item_label="b·∫£n ghi ch·∫•m c√¥ng"
    )