# app/utils/employee/tab_info.py
import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
from tkcalendar import DateEntry
from app import db

# S·ª¨A 1: Import helper m·ªõi
from app.db import execute_query, fetch_query 
from app.utils.utils import create_form_window, go_back,center_window
from app.utils.time_helpers import normalize_date_input
from app.utils.id_helpers import generate_next_manv
from app.utils.business_helpers import safe_delete
from app.utils.treeview_helpers import fill_treeview_chunked # <-- HELPER M·ªöI
from app.theme import setup_styles


def build_tab(parent, root=None, username=None, role=None):
    """Tab 1 - Th√¥ng tin nh√¢n vi√™n (chu·∫©n ho√° t·ª´ module employee.py g·ªëc)"""
    setup_styles()
    parent.configure(bg="#f5e6ca")
    center_window(root, 1200, 600, offset_y=-60)

    # ===== THANH CH·ª®C NƒÇNG =====
    top_frame = tk.Frame(parent, bg="#f9fafb")
    top_frame.pack(fill="x", pady=10)

    search_var = tk.StringVar()
    tk.Label(top_frame, text="üîé T√¨m nh√¢n vi√™n:", font=("Arial", 11),
             bg="#f9fafb").pack(side="left", padx=5)
    entry_search = ttk.Entry(top_frame, textvariable=search_var, width=35)
    entry_search.pack(side="left", padx=5)
    
    # Label hi·ªÉn th·ªã tr·∫°ng th√°i (v√≠ d·ª•: "ƒêang t·∫£i...")
    status_label_var = tk.StringVar(value="")
    status_label = ttk.Label(top_frame, textvariable=status_label_var, font=("Arial", 10, "italic"), background="#f9fafb", foreground="blue")
    status_label.pack(side="left", padx=10)

    entry_search.bind("<KeyRelease>", lambda e: load_data(tree, status_label_var, search_var.get().strip()))


    # ====== B·∫¢NG HI·ªÇN TH·ªä ======
    headers_vn = {
        "MaNV": "M√£ NV",
        "HoTen": "H·ªç t√™n",
        "GioiTinh": "Gi·ªõi t√≠nh",
        "NgaySinh": "Ng√†y sinh",
        "ChucVu": "Ch·ª©c v·ª•",
        "LuongCoBan": "L∆∞∆°ng c∆° b·∫£n",
        "TrangThai": "Tr·∫°ng th√°i"
    }
    columns = list(headers_vn.keys())
    tree = ttk.Treeview(parent, columns=columns, show="headings", height=15)

    for col in columns:
        tree.heading(col, text=headers_vn[col])
        tree.column(col, anchor="center", width=120)
    tree.pack(fill="both", expand=True, padx=10, pady=10)

    # ==================================================
    # S·ª¨A 2: N√ÇNG C·∫§P load_data V·ªöI fill_treeview_chunked
    # ==================================================
    def load_data(tree_widget, status_var, keyword=None):
        """T·∫£i danh s√°ch nh√¢n vi√™n, h·ªó tr·ª£ t√¨m ki·∫øm v√† ch√®n theo t·ª´ng m·∫ª (chunked)"""
        
        # X√≥a TreeView ngay l·∫≠p t·ª©c (fill_treeview_chunked s·∫Ω t·ª± x√≥a, 
        # nh∆∞ng ch√∫ng ta x√≥a ·ªü ƒë√¢y ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y ph·∫£n h·ªìi ngay)
        tree_widget.delete(*tree_widget.get_children()) 
        status_var.set("ƒêang t·∫£i d·ªØ li·ªáu...")
        tree_widget.update_idletasks() # √âp Tkinter c·∫≠p nh·∫≠t UI

        query = """
            SELECT MaNV, HoTen, GioiTinh, NgaySinh, ChucVu, LuongCoBan, TrangThai
            FROM NhanVien
        """
        params = ()

        if keyword:
            keyword = f"%{keyword.strip()}%"
            query += """
                WHERE MaNV LIKE ? OR
                      HoTen LIKE ? OR
                      GioiTinh LIKE ? OR
                      ChucVu LIKE ? OR
                      TrangThai LIKE ?
            """
            params = (keyword, keyword, keyword, keyword, keyword)
        
        query += " ORDER BY MaNV" 

        try:
            # 1. L·∫•y d·ªØ li·ªáu (nhanh)
            rows = db.fetch_query(query, params)

            # ===== M√É GI·∫¢ ƒê·ªÇ KI·ªÇM TRA HI·ªÜU SU·∫§T (Stress Test) =====
            #if not keyword: # Ch·ªâ test khi kh√¥ng t√¨m ki·∫øm
            #   print("--- ƒêANG CH·∫†Y STRESS TEST 5000 D√íNG (ƒê√É S·ª¨A L·ªñI IID) ---")

                # T·∫°o 5000 d√≤ng test v·ªõi MaNV duy nh·∫•t
                #test_rows = []
                #for i in range(5000):
                #   test_rows.append({
                #        "MaNV": f"NV_TEST_{i}", # <-- MaNV (iid) duy nh·∫•t
                #        "HoTen": f"Nh√¢n vi√™n Test {i}", 
                #        "GioiTinh": "Nam", 
                #        "NgaySinh": None, 
                #        "ChucVu": "Tester", 
                #        "LuongCoBan": 100000, 
                #        "TrangThai": "Testing"
                #    })
                # Ghi ƒë√® 'rows' b·∫±ng d·ªØ li·ªáu test
                #rows = test_rows
            # ================= H·∫æT M√É GI·∫¢ =======================
            
            # 2. Chu·∫©n b·ªã d·ªØ li·ªáu (nhanh)
            tree_data = []
            for row in rows:
                manv = row["MaNV"].strip()
                hoten = row["HoTen"]
                ngaysinh_obj = row["NgaySinh"]
                ngaysinh = ngaysinh_obj.strftime("%d/%m/%Y") if ngaysinh_obj else ""
                chucvu = row["ChucVu"]
                luong_obj = row["LuongCoBan"]
                luong = f"{int(luong_obj):,}" if luong_obj is not None else "0"
                trangthai = row["TrangThai"]
                gioitinh = row["GioiTinh"]

                # Chu·∫©n b·ªã 1 tuple (danh s√°ch) c√°c gi√° tr·ªã
                values_tuple = (manv, hoten, gioitinh, ngaysinh, chucvu, luong, trangthai)
                
                # Th√™m v√†o danh s√°ch ƒë·ªÉ ch√®n
                # Ch√∫ng ta d√πng ƒë·ªãnh d·∫°ng (iid, values) m√† helper h·ªó tr·ª£
                tree_data.append({"iid": manv, "values": values_tuple})

            # 3. "V·∫Ω" l√™n TreeView (m∆∞·ª£t m√†)
            def on_load_complete():
                status_var.set(f"ƒê√£ t·∫£i {len(rows)} nh√¢n vi√™n.")
                
            fill_treeview_chunked(
                tree=tree_widget, 
                rows=tree_data, 
                batch=100, # T·∫£i 100 d√≤ng m·ªói 10ms
                on_complete=on_load_complete
            )

        except Exception as e:
            status_var.set("L·ªói t·∫£i d·ªØ li·ªáu!")
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i ho·∫∑c hi·ªÉn th·ªã d·ªØ li·ªáu: {e}")

    # ====== N√öT CH·ª®C NƒÇNG ======
    # (C·∫≠p nh·∫≠t c√°c h√†m lambda ƒë·ªÉ truy·ªÅn tree v√† status_label_var)
    def refresh_data():
        load_data(tree, status_label_var)

    ttk.Button(top_frame, text="üîÑ T·∫£i l·∫°i", style="Close.TButton",
               command=refresh_data).pack(side="left", padx=5)
    ttk.Button(top_frame, text="‚ûï Th√™m", style="Add.TButton",
               command=lambda: add_employee(refresh_data)).pack(side="left", padx=5)
    ttk.Button(top_frame, text="‚úèÔ∏è S·ª≠a", style="Edit.TButton",
               command=lambda: edit_employee(tree, refresh_data)).pack(side="left", padx=5)
    ttk.Button(top_frame, text="üóë X√≥a", style="Delete.TButton",
               command=lambda: delete_employee(tree, refresh_data)).pack(side="left", padx=5)
    ttk.Button(top_frame, text="‚¨Ö Quay l·∫°i", style="Close.TButton",
               command=lambda: go_back(root, username, role)).pack(side="right", padx=6)

    # ====== G·∫ÆN S·ª∞ KI·ªÜN ======
    def on_search_change(event=None):
        kw = search_var.get().strip()
        load_data(tree, status_label_var, kw) 

    def on_double_click(event):
        sel = tree.selection()
        if sel:
            edit_employee(tree, refresh_data)
    tree.bind("<Double-1>", on_double_click)

    # T·∫£i d·ªØ li·ªáu l·∫ßn ƒë·∫ßu
    refresh_data()


# =============================================================
# C√ÅC H√ÄM CRUD (Kh√¥ng thay ƒë·ªïi, gi·ªØ nguy√™n)
# =============================================================
def add_employee(refresh):
    """Th√™m nh√¢n vi√™n m·ªõi"""
    win, form = create_form_window("‚ûï Th√™m nh√¢n vi√™n m·ªõi")
    entries = {}

    labels = ["M√£ NV", "H·ªç t√™n", "Gi·ªõi t√≠nh", "Ng√†y sinh",
              "Ch·ª©c v·ª•", "L∆∞∆°ng c∆° b·∫£n", "Tr·∫°ng th√°i"]
    positions = ["Qu·∫£n l√Ω", "Thu ng√¢n", "Ph·ª•c v·ª•", "Pha ch·∫ø", "T·∫°p v·ª•", "B·∫£o v·ªá"]
    statuses = ["ƒêang l√†m", "T·∫°m ngh·ªâ", "ƒê√†o t·∫°o", "ƒê√£ ngh·ªâ"]

    for i, text in enumerate(labels):
        ttk.Label(form, text=text, font=("Arial", 11),
                  background="#f8f9fa").grid(row=i, column=0, sticky="w", padx=8, pady=6)

        if text == "Ch·ª©c v·ª•":
            cb = ttk.Combobox(form, values=positions, state="readonly", font=("Arial", 11))
            cb.current(1)
            cb.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = cb

        elif text == "Ng√†y sinh":
            cal = DateEntry(form, date_pattern="yyyy-mm-dd", font=("Arial", 11),
                            background="#3e2723", foreground="white", borderwidth=2)
            cal.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = cal

        elif text == "Tr·∫°ng th√°i":
            cb = ttk.Combobox(form, values=statuses, state="readonly", font=("Arial", 11))
            cb.set("ƒêang l√†m")
            cb.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = cb

        elif text == "Gi·ªõi t√≠nh":
            gender_var = tk.StringVar(value="Nam")
            frame_gender = tk.Frame(form, bg="#f8f9fa")
            frame_gender.grid(row=i, column=1, padx=8, pady=6, sticky="w")

            tk.Radiobutton(frame_gender, text="Nam", variable=gender_var, value="Nam",
                           font=("Arial", 11), bg="#f8f9fa").pack(side="left", padx=5)
            tk.Radiobutton(frame_gender, text="N·ªØ", variable=gender_var, value="N·ªØ",
                           font=("Arial", 11), bg="#f8f9fa").pack(side="left", padx=5)
            entries[text] = gender_var
        else:
            entry = ttk.Entry(form, font=("Arial", 11))
            entry.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = entry

    btn_frame = tk.Frame(win, bg="#f8f9fa")
    btn_frame.pack(pady=10)
    ttk.Button(btn_frame, text="üíæ L∆∞u s·∫£n ph·∫©m", style="Add.TButton",
               command=lambda: submit()).pack(ipadx=10, ipady=6)

    def submit():
        try:
            manv = entries["M√£ NV"].get().strip().upper()
            hoten = entries["H·ªç t√™n"].get().strip()
            gt = entries["Gi·ªõi t√≠nh"].get()
            ngs = normalize_date_input(entries["Ng√†y sinh"].get_date())
            cv = entries["Ch·ª©c v·ª•"].get().strip()
            luong = float(entries["L∆∞∆°ng c∆° b·∫£n"].get().strip() or 0)
            tt = entries["Tr·∫°ng th√°i"].get().strip() or "ƒêang l√†m"

            if not manv:
                manv = generate_next_manv(db.cursor)

            # S·ª¨A NH·ªé: D√πng execute_scalar cho chu·∫©n
            count = db.execute_scalar("SELECT COUNT(*) FROM NhanVien WHERE MaNV=?", (manv,))
            
            if count > 0:
                messagebox.showwarning("‚ö†Ô∏è Tr√πng m√£ NV", f"M√£ {manv} ƒë√£ t·ªìn t·∫°i!")
                return

            query = """
            INSERT INTO NhanVien (MaNV, HoTen, GioiTinh, NgaySinh, ChucVu, LuongCoBan, TrangThai)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            """
            params = (manv, hoten, gt, ngs, cv, luong, tt)

            if execute_query(query, params):
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ th√™m nh√¢n vi√™n {manv}!")
                refresh()
                win.destroy()

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m nh√¢n vi√™n: {e}")


def edit_employee(tree, refresh):
    """S·ª≠a nh√¢n vi√™n"""
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("‚ö†Ô∏è Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn nh√¢n vi√™n c·∫ßn s·ª≠a!")
        return

    # S·ª¨A NH·ªé: L·∫•y iid (MaNV) t·ª´ tree.selection()
    # thay v√¨ tree.item(..., "values")[0]
    # ƒêi·ªÅu n√†y an to√†n h∆°n n·∫øu c·ªôt b·ªã ƒë·ªïi th·ª© t·ª±
    manv = selected[0] 
    values = tree.item(manv)["values"]


    win = tk.Toplevel()
    win.title(f"‚úèÔ∏è S·ª≠a nh√¢n vi√™n {manv}")
    win.geometry("430x480")
    win.configure(bg="#f8f9fa")

    form = tk.Frame(win, bg="#f8f9fa")
    form.pack(padx=20, pady=15, fill="both", expand=True)

    labels = ["H·ªç t√™n", "Gi·ªõi t√≠nh", "Ng√†y sinh", "Ch·ª©c v·ª•",
              "L∆∞∆°ng c∆° b·∫£n", "Tr·∫°ng th√°i"]
    entries = {}
    positions = ["Qu·∫£n l√Ω", "Thu ng√¢n", "Ph·ª•c v·ª•", "Pha ch·∫ø", "T·∫°p v·ª•", "B·∫£o v·ªá"]
    statuses = ["ƒêang l√†m", "T·∫°m ngh·ªâ", "ƒê√†o t·∫°o", "ƒê√£ ngh·ªâ"]
    
    # values[0] l√† MaNV, n√™n ta b·∫Øt ƒë·∫ßu t·ª´ values[1]
    current = dict(zip(labels, values)) 
    
    # S·ª¨A NH·ªé: Chuy·ªÉn ƒë·ªïi t√™n c·ªôt TreeView (values)
    # sang t√™n c·ªôt trong form (labels)
    # V√¨ values gi·ªù c√≥ 7 c·ªôt (g·ªìm MaNV),
    # nh∆∞ng 'current' dict ch·ªâ c·∫ßn 6 c·ªôt (theo 'labels')
    
    # L·∫•y gi√° tr·ªã t·ª´ TreeView b·∫±ng t√™n c·ªôt (ƒë√£ ƒë·ªãnh nghƒ©a ·ªü headers_vn)
    item_values = tree.item(manv)["values"]
    current_data = {
        "H·ªç t√™n": item_values[1],
        "Gi·ªõi t√≠nh": item_values[2],
        "Ng√†y sinh": item_values[3],
        "Ch·ª©c v·ª•": item_values[4],
        "L∆∞∆°ng c∆° b·∫£n": item_values[5],
        "Tr·∫°ng th√°i": item_values[6]
    }

    if current_data["Ng√†y sinh"]:
        try:
            current_data["Ng√†y sinh"] = datetime.strptime(current_data["Ng√†y sinh"], "%d/%m/%Y").date()
        except:
            current_data["Ng√†y sinh"] = datetime.today().date()

    for i, text in enumerate(labels):
        ttk.Label(form, text=text, font=("Arial", 11), background="#f8f9fa").grid(
            row=i, column=0, sticky="w", padx=8, pady=6
        )
        
        current_val = current_data[text]

        if text == "Ch·ª©c v·ª•":
            cb = ttk.Combobox(form, values=positions, state="readonly", font=("Arial", 11))
            cb.set(current_val)
            cb.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = cb
        elif text == "Ng√†y sinh":
            cal = DateEntry(form, date_pattern="yyyy-mm-dd", font=("Arial", 11),
                            background="#3e2723", foreground="white", borderwidth=2)
            cal.set_date(current_val)
            cal.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = cal
        elif text == "Tr·∫°ng th√°i":
            cb = ttk.Combobox(form, values=statuses, state="readonly", font=("Arial", 11))
            cb.set(current_val if current_val in statuses else "ƒêang l√†m")
            cb.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = cb
        elif text == "Gi·ªõi t√≠nh":
            gender_var = tk.StringVar(value=current_val or "Nam")
            frame_gender = tk.Frame(form, bg="#f8f9fa")
            frame_gender.grid(row=i, column=1, padx=8, pady=6, sticky="w")
            tk.Radiobutton(frame_gender, text="Nam", variable=gender_var, value="Nam",
                           font=("Arial", 11), bg="#f8f9fa").pack(side="left", padx=5)
            tk.Radiobutton(frame_gender, text="N·ªØ", variable=gender_var, value="N·ªØ",
                           font=("Arial", 11), bg="#f8f9fa").pack(side="left", padx=5)
            entries[text] = gender_var
        else:
            ent = ttk.Entry(form, font=("Arial", 11))
            ent.insert(0, current_val)
            ent.grid(row=i, column=1, padx=8, pady=6, sticky="ew")
            entries[text] = ent

    btn_frame = tk.Frame(win, bg="#f8f9fa")
    btn_frame.pack(pady=10)
    ttk.Button(btn_frame, text="üíæ L∆∞u s·∫£n ph·∫©m", style="Add.TButton",
               command=lambda: save()).pack(ipadx=10, ipady=6)

    def save():
        try:
            hoten = entries["H·ªç t√™n"].get().strip()
            gt = entries["Gi·ªõi t√≠nh"].get().strip()
            ngs = normalize_date_input(entries["Ng√†y sinh"].get_date())
            cv = entries["Ch·ª©c v·ª•"].get().strip()
            luong = float(entries["L∆∞∆°ng c∆° b·∫£n"].get().replace(",", "").strip() or 0)
            tt = entries["Tr·∫°ng th√°i"].get().strip()

            if not hoten:
                messagebox.showwarning("Thi·∫øu th√¥ng tin", "‚ö†Ô∏è H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
                return

            query = """
                UPDATE NhanVien
                SET HoTen=?, GioiTinh=?, NgaySinh=?, ChucVu=?, LuongCoBan=?, TrangThai=?
                WHERE MaNV=?
            """
            params = (hoten, gt, ngs, cv, luong, tt, manv)

            if execute_query(query, params):
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ c·∫≠p nh·∫≠t nh√¢n vi√™n {manv}.")
                refresh()
                win.destroy()

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t nh√¢n vi√™n: {e}")


def delete_employee(tree, refresh):
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("‚ö†Ô∏è Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn nh√¢n vi√™n c·∫ßn x√≥a!")
        return
    
    # L·∫•y iid (MaNV) tr·ª±c ti·∫øp
    manv = selected[0]

    safe_delete(
        table_name="NhanVien",
        key_column="MaNV",
        key_value=manv,
        cursor=db.cursor,
        conn=db.conn,
        refresh_func=refresh,
        item_label="nh√¢n vi√™n"
    )