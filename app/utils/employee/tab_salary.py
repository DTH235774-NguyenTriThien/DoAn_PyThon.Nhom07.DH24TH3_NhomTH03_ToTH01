import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
from app import db
from app.db import execute_query
from app.utils.employee.tab_attendance import combine_date_time  # n·∫øu c·∫ßn t√≠nh gi·ªù
from app.theme import setup_styles
from app.utils.utils import go_back
import os
from app.utils.export_helper import export_to_excel_from_query
from openpyxl import Workbook
from datetime import datetime



def build_tab(parent, root=None, username=None, role=None):
    """Tab B·∫£ng l∆∞∆°ng ‚Äî qu·∫£n l√Ω l∆∞∆°ng nh√¢n vi√™n"""
    setup_styles()
    parent.configure(bg="#f5e6ca")

    # ===== THANH C√îNG C·ª§ =====
    top_frame = tk.Frame(parent, bg="#f9fafb")
    top_frame.pack(fill="x", pady=10)

    tk.Label(top_frame, text="üí∞ Qu·∫£n l√Ω b·∫£ng l∆∞∆°ng", font=("Arial", 13, "bold"),
             bg="#f9fafb", fg="#333").pack(side="left", padx=10)

    search_var = tk.StringVar()
    entry_search = ttk.Entry(top_frame, textvariable=search_var, width=35)
    entry_search.pack(side="left", padx=5)

    def on_search_change(*args):
        keyword = search_var.get().strip()
        load_data(keyword)

    search_var.trace_add("write", on_search_change)

    ttk.Button(top_frame, text="üîÑ T·∫£i l·∫°i", style="Close.TButton",
            command=lambda: [search_var.set(""), load_data()]).pack(side="left", padx=5)
    
    ttk.Button(top_frame, text="üíæ Xu·∫•t Excel", style="Add.TButton",
           command=lambda: export_salary()).pack(side="left", padx=5)



    ttk.Button(top_frame, text="‚ûï T·∫°o l∆∞∆°ng m·ªõi", style="Add.TButton",
               command=lambda: generate_salary()).pack(side="left", padx=5)
    
    ttk.Button(top_frame, text="‚úèÔ∏è C·∫≠p nh·∫≠t tr·∫°ng th√°i", style="Edit.TButton",
               command=lambda: edit_status(tree, load_data)).pack(side="left", padx=5)
    
    ttk.Button(top_frame, text="üóë X√≥a", style="Delete.TButton",
               command=lambda: delete_salary(tree, load_data)).pack(side="left", padx=5)
    
    ttk.Button(top_frame, text="‚¨Ö Quay l·∫°i", style="Close.TButton",
               command=lambda: go_back(root, username, role)).pack(side="right", padx=5)

    # ===== TREEVIEW =====
    columns = ["MaLuong", "MaNV", "HoTen", "Thang", "Nam", "TongGio", "LuongThucTe", "TrangThai"]
    headers = {
        "MaLuong": "M√£ L∆∞∆°ng",
        "MaNV": "M√£ NV",
        "HoTen": "H·ªç t√™n",
        "Thang": "Th√°ng",
        "Nam": "NƒÉm",
        "TongGio": "T·ªïng Gi·ªù",
        "LuongThucTe": "L∆∞∆°ng (VNƒê)",
        "TrangThai": "Tr·∫°ng th√°i"
    }

    tree = ttk.Treeview(parent, columns=columns, show="headings", height=15)
    for col in columns:
        tree.heading(col, text=headers[col])
        tree.column(col, anchor="center", width=120)
    tree.pack(fill="both", expand=True, padx=10, pady=10)

    # ===== H√ÄM T·∫¢I D·ªÆ LI·ªÜU =====
    def load_data(keyword=None):
        for item in tree.get_children():
            tree.delete(item)

        query = """
            SELECT BL.MaLuong, NV.MaNV, NV.HoTen, BL.Thang, BL.Nam, BL.TongGio, BL.LuongThucTe, BL.TrangThai
            FROM BangLuong BL
            JOIN NhanVien NV ON BL.MaNV = NV.MaNV
        """
        params = ()
        if keyword:
            query += " WHERE NV.HoTen LIKE ? OR NV.MaNV LIKE ?"
            keyword = f"%{keyword.strip()}%"
            params = (keyword, keyword)

        db.cursor.execute(query, params)
        rows = db.cursor.fetchall()

        for r in rows:
            tree.insert("", "end", values=[
                r.MaLuong, r.MaNV.strip(), r.HoTen.strip(),
                r.Thang, r.Nam,
                f"{r.TongGio:.1f}", f"{r.LuongThucTe:,.0f}",
                r.TrangThai
            ])

    load_data()

    # ===== H√ÄM T·∫†O L∆Ø∆†NG M·ªöI =====
    def generate_salary():
        try:
            now = datetime.now()
            thang, nam = now.month, now.year

            # L·∫•y danh s√°ch nh√¢n vi√™n ƒëang l√†m
            db.cursor.execute("SELECT MaNV, LuongCoBan FROM NhanVien WHERE TrangThai=N'ƒêang l√†m'")
            nvs = db.cursor.fetchall()

            count_added = 0
            for nv in nvs:
                manv, luongcb = nv.MaNV.strip(), nv.LuongCoBan

                # T√≠nh t·ªïng gi·ªù trong th√°ng
                db.cursor.execute("""
                    SELECT SUM(DATEDIFF(MINUTE, ClockIn, ClockOut)) / 60.0
                    FROM ChamCong
                    WHERE MaNV=? AND MONTH(NgayLam)=? AND YEAR(NgayLam)=?
                          AND ClockIn IS NOT NULL AND ClockOut IS NOT NULL
                """, (manv, thang, nam))
                tong_gio = db.cursor.fetchone()[0] or 0

                luong_thuc_te = float(luongcb) * (float(tong_gio) / 208.0)

                # Th√™m v√†o b·∫£ng l∆∞∆°ng n·∫øu ch∆∞a t·ªìn t·∫°i
                db.cursor.execute("""
                    SELECT COUNT(*) FROM BangLuong WHERE MaNV=? AND Thang=? AND Nam=?
                """, (manv, thang, nam))
                if db.cursor.fetchone()[0] == 0:
                    execute_query("""
                        INSERT INTO BangLuong (MaNV, Thang, Nam, TongGio, LuongThucTe, TrangThai)
                        VALUES (?, ?, ?, ?, ?, N'Ch∆∞a tr·∫£')
                    """, (manv, thang, nam, tong_gio, luong_thuc_te))
                    count_added += 1

            messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ t·∫°o b·∫£ng l∆∞∆°ng cho {count_added} nh√¢n vi√™n.")
            load_data()

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o b·∫£ng l∆∞∆°ng: {e}")

    # ===== C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI =====
    def edit_status(tree, refresh):
        sel = tree.selection()
        if not sel:
            messagebox.showwarning("‚ö†Ô∏è Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn b·∫£n ghi c·∫ßn c·∫≠p nh·∫≠t!")
            return

        val = tree.item(sel[0])["values"]
        maluong, trangthai = val[0], val[-1]
        new_state = "ƒê√£ tr·∫£" if trangthai == "Ch∆∞a tr·∫£" else "Ch∆∞a tr·∫£"

        if execute_query("UPDATE BangLuong SET TrangThai=? WHERE MaLuong=?", (new_state, maluong)):
            messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i l∆∞∆°ng {maluong}.")
            refresh()

    # ===== X√ìA B·∫¢NG L∆Ø∆†NG =====
    def delete_salary(tree, refresh):
        sel = tree.selection()
        if not sel:
            messagebox.showwarning("‚ö†Ô∏è Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn b·∫£n ghi c·∫ßn x√≥a!")
            return

        val = tree.item(sel[0])["values"]
        maluong = val[0]

        if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b·∫£ng l∆∞∆°ng {maluong}?"):
            if execute_query("DELETE FROM BangLuong WHERE MaLuong=?", (maluong,)):
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ x√≥a b·∫£ng l∆∞∆°ng {maluong}.")
                refresh()

def export_salary():
    query = """
        SELECT BL.MaLuong, NV.MaNV, NV.HoTen, BL.Thang, BL.Nam, 
               BL.TongGio, BL.LuongThucTe, BL.TrangThai
        FROM BangLuong BL
        JOIN NhanVien NV ON BL.MaNV = NV.MaNV
        ORDER BY BL.Nam DESC, BL.Thang DESC
    """
    headers = ["M√£ L∆∞∆°ng", "M√£ NV", "H·ªç T√™n", "Th√°ng", "NƒÉm", "T·ªïng Gi·ªù", "L∆∞∆°ng (VNƒê)", "Tr·∫°ng Th√°i"]
    export_to_excel_from_query(db.cursor, query, headers, title="B·∫£ng L∆∞∆°ng")
