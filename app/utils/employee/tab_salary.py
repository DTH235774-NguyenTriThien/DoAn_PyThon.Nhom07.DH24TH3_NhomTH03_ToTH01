# app/utils/employee/tab_salary.py
import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
from app import db
import os
from openpyxl import Workbook
from datetime import datetime

# Imports
from app.db import fetch_query, execute_query, execute_scalar
from app.theme import setup_styles
# S·ª¨A 1: X√≥a import go_back
# from app.utils.utils import go_back 
from app.utils.export_helper import export_to_excel_from_query
from app.utils.business_helpers import safe_delete 
from app.utils.treeview_helpers import fill_treeview_chunked 

# S·ª¨A 2: Thay ƒë·ªïi ch·ªØ k√Ω h√†m, lo·∫°i b·ªè root, username, role
# v√† nh·∫≠n on_back_callback
def build_tab(parent, on_back_callback):
    """Tab B·∫£ng l∆∞∆°ng ‚Äî qu·∫£n l√Ω l∆∞∆°ng nh√¢n vi√™n"""
    setup_styles()
    parent.configure(bg="#f5e6ca")

    # ===== THANH C√îNG C·ª§ (TOP FRAME) =====
    top_frame = tk.Frame(parent, bg="#f9fafb")
    top_frame.pack(fill="x", pady=10, padx=10) 

    # --- Frame N√öT CH·ª®C NƒÇNG (B√™n ph·∫£i) ---
    btn_frame = tk.Frame(top_frame, bg="#f9fafb")
    btn_frame.pack(side="right", anchor="n", padx=(10, 0))
    
    ttk.Button(btn_frame, text="üîÑ T·∫£i l·∫°i", style="Close.TButton",
             command=lambda: refresh_data()).pack(side="left", padx=5)
    
    ttk.Button(btn_frame, text="üíæ Xu·∫•t Excel", style="Add.TButton",
             command=lambda: export_salary()).pack(side="left", padx=5)

    ttk.Button(btn_frame, text="‚ûï T√≠nh l∆∞∆°ng th√°ng n√†y", style="Add.TButton", # ƒê·ªïi t√™n n√∫t
             command=lambda: calculate_or_update_salary(refresh_data)).pack(side="left", padx=5)
    
    ttk.Button(btn_frame, text="‚úèÔ∏è C·∫≠p nh·∫≠t tr·∫°ng th√°i", style="Edit.TButton",
             command=lambda: edit_status(tree, refresh_data)).pack(side="left", padx=5)
    
    ttk.Button(btn_frame, text="üóë X√≥a", style="Delete.TButton",
             command=lambda: delete_salary(tree, refresh_data)).pack(side="left", padx=5)
    
    # S·ª¨A 3: S·ª≠ d·ª•ng on_back_callback cho command
    ttk.Button(btn_frame, text="‚¨Ö Quay l·∫°i", style="Close.TButton",
             command=on_back_callback).pack(side="left", padx=5)

    # --- Frame L·ªåC (B√™n tr√°i, t·ª± m·ªü r·ªông) ---
    filter_frame = tk.Frame(top_frame, bg="#f9fafb")
    filter_frame.pack(side="left", fill="x", expand=True)

    tk.Label(filter_frame, text="üîé T√¨m NV:", font=("Arial", 11),
           bg="#f9fafb").pack(side="left", padx=(5, 2))
    search_var = tk.StringVar()
    entry_search = ttk.Entry(filter_frame, textvariable=search_var, width=30) 
    entry_search.pack(side="left", padx=5, fill="x", expand=True) 

    # Label tr·∫°ng th√°i
    status_label_var = tk.StringVar(value="")
    status_label = ttk.Label(filter_frame, textvariable=status_label_var, font=("Arial", 10, "italic"), background="#f9fafb", foreground="blue")
    status_label.pack(side="left", padx=10)

    # ===== TREEVIEW =====
    columns = ["MaLuong", "MaNV", "HoTen", "Thang", "Nam", "TongGio", "LuongThucTe", "TrangThai"]
    headers = {
        "MaLuong": "M√£ L∆∞∆°ng",
        "MaNV": "M√£ NV",
        "HoTen": "H·ªç t√™n",
        "Thang": "Th√°ng",
        "Nam": "NƒÉm",
        "TongGio": "T·ªïng Gi·ªù",
        "LuongThucTe": "L∆∞∆°ng (VNƒê)",
        "TrangThai": "Tr·∫°ng th√°i"
    }

    tree = ttk.Treeview(parent, columns=columns, show="headings", height=15)
    for col in columns:
        tree.heading(col, text=headers[col])
        tree.column(col, anchor="center", width=120)
    tree.pack(fill="both", expand=True, padx=10, pady=10)

    # ===== H√ÄM T·∫¢I D·ªÆ LI·ªÜU =====
    def load_data(tree_widget, status_var, keyword=None):
        status_var.set("ƒêang t·∫£i d·ªØ li·ªáu...")
        tree_widget.update_idletasks() 

        query = """
            SELECT BL.MaLuong, NV.MaNV, NV.HoTen, BL.Thang, BL.Nam, BL.TongGio, BL.LuongThucTe, BL.TrangThai
            FROM BangLuong BL
            JOIN NhanVien NV ON BL.MaNV = NV.MaNV
        """
        params = ()
        if keyword:
            query += " WHERE NV.HoTen LIKE ? OR NV.MaNV LIKE ?"
            keyword = f"%{keyword.strip()}%"
            params = (keyword, keyword)
        
        query += " ORDER BY BL.Nam DESC, BL.Thang DESC"

        try:
            rows = db.fetch_query(query, params)
            tree_data = []
            for r in rows:
                tong_gio_f = f"{r['TongGio']:.1f}" if r['TongGio'] is not None else "0.0"
                luong_f = f"{r['LuongThucTe']:,.0f}" if r['LuongThucTe'] is not None else "0"
                
                values_tuple = (
                    r['MaLuong'], r['MaNV'].strip(), r['HoTen'].strip(),
                    r['Thang'], r['Nam'],
                    tong_gio_f, luong_f,
                    r['TrangThai']
                )
                tree_data.append({"iid": r['MaLuong'], "values": values_tuple})

            def on_load_complete():
                status_var.set(f"ƒê√£ t·∫£i {len(rows)} b·∫£n ghi.")
                
            fill_treeview_chunked(
                tree=tree_widget, 
                rows=tree_data, 
                batch=100,
                on_complete=on_load_complete
            )
        except Exception as e:
            status_var.set("L·ªói t·∫£i d·ªØ li·ªáu!")
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i b·∫£ng l∆∞∆°ng: {e}")

    # ===== C√ÅC H√ÄM TI·ªÜN √çCH =====
    def refresh_data():
        keyword = search_var.get().strip()
        load_data(tree, status_label_var, keyword)
    
    def on_search_change(*args):
        refresh_data()
    search_var.trace_add("write", on_search_change)

    # T·∫£i l·∫ßn ƒë·∫ßu
    refresh_data()

# ==============================================================
#  H√ÄM CRUD V√Ä NGHI·ªÜP V·ª§
# ==============================================================

# ==============================================================
# S·ª¨A 3: N√ÇNG C·∫§P H√ÄM T√çNH L∆Ø∆†NG (LOGIC UPSERT)
# (Ph·∫ßn n√†y gi·ªØ nguy√™n, ƒë√£ ch√≠nh x√°c)
# ==============================================================
def calculate_or_update_salary(refresh_func):
    """
    T√≠nh to√°n ho·∫∑c C·∫≠p nh·∫≠t b·∫£ng l∆∞∆°ng h√†ng lo·∫°t cho th√°ng hi·ªán t·∫°i.
    - INSERT n·∫øu ch∆∞a c√≥.
    - UPDATE n·∫øu ƒë√£ c√≥ V√Ä Tr·∫°ng th√°i = 'Ch∆∞a tr·∫£'.
    - B·ªè qua n·∫øu Tr·∫°ng th√°i = 'ƒê√£ tr·∫£'.
    """
    try:
        now = datetime.now()
        thang, nam = now.month, now.year

        # L·∫•y danh s√°ch nh√¢n vi√™n ƒëang l√†m
        nv_query = "SELECT MaNV, LuongCoBan FROM NhanVien WHERE TrangThai=N'ƒêang l√†m'"
        nvs = db.fetch_query(nv_query) 

        if not nvs:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng c√≥ nh√¢n vi√™n n√†o 'ƒêang l√†m' ƒë·ªÉ t√≠nh l∆∞∆°ng.")
            return

        count_processed = 0
        
        for nv in nvs:
            manv = nv["MaNV"].strip()
            luongcb = nv["LuongCoBan"]

            # 1. T√≠nh to√°n l∆∞∆°ng m·ªõi
            sum_query = """
                SELECT SUM(DATEDIFF(MINUTE, ClockIn, ClockOut)) / 60.0
                FROM ChamCong
                WHERE MaNV=? AND MONTH(NgayLam)=? AND YEAR(NgayLam)=?
                      AND ClockIn IS NOT NULL AND ClockOut IS NOT NULL
            """
            tong_gio = db.execute_scalar(sum_query, (manv, thang, nam)) or 0.0 
            
            # =========================================================
            # S·ª¨A L·ªñI LOGIC T√çNH L∆Ø∆†NG T·∫†I ƒê√ÇY
            # (Gi·∫£ ƒë·ªãnh LuongCoBan l√† L∆Ø∆†NG THEO GI·ªú)
            # =========================================================
            
            # Code C≈® (SAI):
            # luong_thuc_te = float(luongcb or 0) * (float(tong_gio) / 208.0) 
            
            # Code M·ªöI (ƒê√öNG):
            luong_thuc_te = float(luongcb or 0) * float(tong_gio)
            
            # =========================================================

            # 2. Ki·ªÉm tra b·∫£n ghi hi·ªán c√≥
            check_query = "SELECT MaLuong, TrangThai FROM BangLuong WHERE MaNV=? AND Thang=? AND Nam=?"
            existing_record = db.fetch_query(check_query, (manv, thang, nam))

            if existing_record:
                # ƒê√É T·ªíN T·∫†I -> C√¢n nh·∫Øc UPDATE
                current_status = existing_record[0]["TrangThai"]
                maluong = existing_record[0]["MaLuong"]
                
                if current_status == 'Ch∆∞a tr·∫£':
                    # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu CH∆ØA TR·∫¢
                    update_query = """
                        UPDATE BangLuong 
                        SET TongGio = ?, LuongThucTe = ?
                        WHERE MaLuong = ?
                    """
                    if db.execute_query(update_query, (tong_gio, luong_thuc_te, maluong)):
                        count_processed += 1
                else:
                    # N·∫øu 'ƒê√£ tr·∫£', b·ªè qua kh√¥ng x·ª≠ l√Ω
                    pass 
            else:
                # CH∆ØA T·ªíN T·∫†I -> INSERT
                insert_query = """
                    INSERT INTO BangLuong (MaNV, Thang, Nam, TongGio, LuongThucTe, TrangThai)
                    VALUES (?, ?, ?, ?, ?, N'Ch∆∞a tr·∫£')
                """
                if db.execute_query(insert_query, (manv, thang, nam, tong_gio, luong_thuc_te)):
                    count_processed += 1

        messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ t√≠nh to√°n/c·∫≠p nh·∫≠t l∆∞∆°ng cho {count_processed} nh√¢n vi√™n.")
        refresh_func()

    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t√≠nh l∆∞∆°ng: {e}")


def edit_status(tree, refresh):
    """C·∫≠p nh·∫≠t tr·∫°ng th√°i 'ƒê√£ tr·∫£' / 'Ch∆∞a tr·∫£'"""
    sel = tree.selection()
    if not sel:
        messagebox.showwarning("‚ö†Ô∏è Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn b·∫£n ghi c·∫ßn c·∫≠p nh·∫≠t!")
        return

    maluong = sel[0] 
    values = tree.item(maluong)["values"]
    trangthai = values[-1] 
    
    new_state = "ƒê√£ tr·∫£" if trangthai == "Ch∆∞a tr·∫£" else "Ch∆∞a tr·∫£"

    if execute_query("UPDATE BangLuong SET TrangThai=? WHERE MaLuong=?", (new_state, maluong)):
        messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i l∆∞∆°ng {maluong}.")
        refresh()


def delete_salary(tree, refresh):
    """X√≥a b·∫£ng l∆∞∆°ng (d√πng safe_delete)"""
    sel = tree.selection()
    if not sel:
        messagebox.showwarning("‚ö†Ô∏è Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn b·∫£n ghi c·∫ßn x√≥a!")
        return

    maluong = sel[0] 

    safe_delete(
        table_name="BangLuong",
        key_column="MaLuong",
        key_value=maluong,
        cursor=db.cursor,
        conn=db.conn,
        refresh_func=refresh,
        item_label="b·∫£ng l∆∞∆°ng"
    )

def export_salary():
    """Xu·∫•t b·∫£ng l∆∞∆°ng ra Excel (d√πng helper)"""
    query = """
        SELECT BL.MaLuong, NV.MaNV, NV.HoTen, BL.Thang, BL.Nam, 
               BL.TongGio, BL.LuongThucTe, BL.TrangThai
        FROM BangLuong BL
        JOIN NhanVien NV ON BL.MaNV = NV.MaNV
        ORDER BY BL.Nam DESC, BL.Thang DESC
    """
    headers = ["M√£ L∆∞∆°ng", "M√£ NV", "H·ªç T√™n", "Th√°ng", "NƒÉm", "T·ªïng Gi·ªù", "L∆∞∆°ng (VNƒê)", "Tr·∫°ng Th√°i"]
    
    try:
        export_to_excel_from_query(db.cursor, query, headers, title="B·∫£ng L∆∞∆°ng")
        messagebox.showinfo("‚úÖ Th√†nh c√¥ng", "Xu·∫•t file Excel th√†nh c√¥ng!")
    except Exception as e:
        messagebox.showerror("L·ªói xu·∫•t file", f"Kh√¥ng th·ªÉ xu·∫•t file Excel:\n{e}")